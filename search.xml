<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>方差分析ANOVA</title>
    <url>/2021/07/13/ANOVA/</url>
    <content><![CDATA[<h2 id="anova">ANOVA</h2>
<p>ANOVA, &quot;Analysis of Variance&quot;,方差分析通常用来进行 三组或者三组以上的独立样本的之间的均值检验。</p>
<h2 id="anova-test">ANOVA test</h2>
<p>方差分析具备的条件 1. 在每个因子水平的数据中，观察值是独立的，随机的获取的。 2. 每个因子的数据是正态分布的。 3. 这些正太分布的数据有相同的方差。</p>
<h2 id="one-way-anova-test">One-way ANOVA test</h2>
<p>One-way ANOVA test是独立两个样本t-test均值比较的拓展， 它常常用来进行多组的比较。在one-way ANOVA中，会用一个变量(factor variable) 将数据分成多个组别，然后在来进行One-way方差分析。</p>
<h3 id="one-way-的假设">One-way 的假设</h3>
<ol type="1">
<li>零假设（Null hypothesis）: 不同组之间的均值无差异。</li>
<li>备择假设（Alternative hypothesis）：至少有一个样本均值和其他的不相同。</li>
</ol>
<h2 id="two-way-anova">Two-way ANOVA</h2>
<p>用来判断双因素影响变量，以及两个变量之间的是否能相互影响来相应变量。 这时候来分组的因子变量（factor variable）有2个。</p>
<h3 id="two-way-假设">Two-way 假设</h3>
<p>零假设： 1. 因子A分成的不同组别之间的均值没有差异 2. 因子B分成的不同组别之间的均值没有差异 3. 因子A和B之间没有相互影响 备择假设： 假设1和2他们的均值不同等。 假设3，A和B之间存在相互作用</p>
]]></content>
      <tags>
        <tag>One-Way</tag>
        <tag>Two-Way</tag>
      </tags>
  </entry>
  <entry>
    <title>KEGG数据库下载</title>
    <url>/2021/01/22/KEGG%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="kegg-数据库">1.KEGG 数据库</h3>
<p>KEGG是现在主流的基因注释的数据库之一,KEGG 是一个集成的数据库资源， 主要有18个子库构成，分成四个主要部分，包括： 系统信息（KEGG 代谢通路，简介，模块）； 基因组信息（直系的功能基因，基因组，基因，基因序列相似性）； 化学信息（小分子，聚糖，反应，反应类型，酶命名） 健康信息（疾病和变异相关的网络，人类基因组变异，人类疾病，药物，药物群，健康相关物质）</p>
<h3 id="生物信息学常用的子库介绍">2.生物信息学常用的子库介绍</h3>
<h4 id="kegg-orthology">2.1 KEGG Orthology</h4>
<p>KEGG Orthology(KO)是用功能直系同源基因表示分子功能的数据库。 功能直系同源是手动</p>
]]></content>
      <categories>
        <category>database</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch实操</title>
    <url>/2021/01/20/Pytorch%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<p>pytorch，深度学习流行的框架之一，Facebook开发维护，社区活跃度高。</p>
<h3 id="pytorch维度转化相关">1.pytorch维度转化相关</h3>
<h4 id="permute-vs-transpose">1.1 permute vs transpose</h4>
<p>词义是重新排列，改变次序的意思，在pytorch中主要用来实现tensor的维度转换。</p>
<p>pytorch官方的解释如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ permute(*dims) → Tensor</span><br><span class="line">$     Returns a view of the original tensor with its dimensions permuted.</span><br><span class="line">$     Parameters</span><br><span class="line">$         *dims (int...) – The desired ordering of dimensions</span><br></pre></td></tr></table></figure>
<p>Example <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.randn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.size()</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.permute(<span class="number">3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>).size()</span><br><span class="line">torch.Size([<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure> Tensor.permute(a,b,c,d, ...)：permute函数可以对任意高维矩阵进行转置； 但没有 torch.permute() 这个调用方式，只能 Tensor.permute()；</p>
<p>torch.transpose(Tensor, a,b)：transpose只能操作2D矩阵的转置， 但是多次的2D转换的结果和permute的一致。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.randn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>).transpose(<span class="number">2</span>,<span class="number">0</span>).shape</span><br><span class="line">torch.Size([<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.randn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>).transpose(<span class="number">2</span>,<span class="number">0</span>).transpose(<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">torch.Size([<span class="number">5</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.randn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>).transpose(<span class="number">2</span>,<span class="number">0</span>).transpose(<span class="number">3</span>,<span class="number">0</span>).transpose(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">torch.Size([<span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure> 总结，复杂的转换可以使用permute，简答的2D转换用transpose。</p>
<h4 id="view">1.2 view</h4>
<p>改变tensor的形状,但是和permute和transpose不同； 参数中的-1就代表这个位置由其他位置的数字来推断；</p>
<p>pytorch的官方解释如下： Returns a new tensor with the same data as the self tensor but of a different shape.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ view(*shape) → Tensor</span><br><span class="line">$ Parameters</span><br><span class="line">$     shape (torch.Size or int...) – the desired size</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.size()</span><br><span class="line">torch.Size([<span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = x.view(<span class="number">16</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y.size()</span><br><span class="line">torch.Size([<span class="number">16</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = x.view(-<span class="number">1</span>, <span class="number">8</span>)  <span class="comment"># the size -1 is inferred from other dimensions</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z.size()</span><br><span class="line">torch.Size([<span class="number">2</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = torch.randn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.size()</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = a.transpose(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># Swaps 2nd and 3rd dimension</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.size()</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.view(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>)  <span class="comment"># Does not change tensor layout in memory</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.size()</span><br><span class="line">torch.Size([<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>torch.equal(b, c)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>pytorch</category>
      </categories>
      <tags>
        <tag>tensor</tag>
      </tags>
  </entry>
  <entry>
    <title>VGG解析和实现</title>
    <url>/2021/01/20/VGG%E8%A7%A3%E6%9E%90%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="vgg16">1. VGG16</h3>
<p>VGG16是运用高深度的卷积神经网络在图像识别方面的一个重要的应用，并在2014年夺得ImageNet的定位第一和分类第二。 <a href="https://arxiv.org/pdf/1409.1556.pdf">论文PDF</a></p>
<h3 id="网络结构">2. 网络结构</h3>
<p>文章中网络结构如下： <img src="/2021/01/20/VGG%E8%A7%A3%E6%9E%90%E5%92%8C%E5%AE%9E%E7%8E%B0/vgg.png" alt="&#39;vgg&#39;"></p>
<h3 id="代码实现">3. 代码实现</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">def conv_layer(chann_in, chann_out, k_size, p_size):</span><br><span class="line">    layer = tnn.Sequential(</span><br><span class="line">        tnn.Conv2d(chann_in, chann_out, kernel_size=k_size, padding=p_size),</span><br><span class="line">        tnn.BatchNorm2d(chann_out),</span><br><span class="line">        tnn.ReLU()</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">return</span> layer</span><br><span class="line"></span><br><span class="line">def vgg_conv_block(in_list, out_list, k_list, p_list, pooling_k, pooling_s):</span><br><span class="line"></span><br><span class="line">    layers = [ conv_layer(in_list[i], out_list[i], k_list[i], p_list[i]) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(in_list)) ]</span><br><span class="line">    layers += [ tnn.MaxPool2d(kernel_size = pooling_k, stride = pooling_s)]</span><br><span class="line">    <span class="built_in">return</span> tnn.Sequential(*layers)</span><br><span class="line"></span><br><span class="line">def vgg_fc_layer(size_in, size_out):</span><br><span class="line">    layer = tnn.Sequential(</span><br><span class="line">        tnn.Linear(size_in, size_out),</span><br><span class="line">        tnn.BatchNorm1d(size_out),</span><br><span class="line">        tnn.ReLU()</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">return</span> layer</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>bernoulli_distribution</title>
    <url>/2021/01/25/bernoulli-distribution/</url>
    <content><![CDATA[<h3 id="伯努利分布bernoulli-distribution">1.伯努利分布（bernoulli distribution）</h3>
<p>伯努利分布，又名两点分布或者0-1分布，是一个离散型的随机分布。 如果伯努利试验成功，则伯努利随机变量取值为1，如果失败，伯努利 随机变量取值为0。记其成功概率为p，失败概率为q=1-p.</p>
<p>则其概率质量函数为：</p>
<p><span class="math display">\[f(x) = p^x(1-p)^{1-x} = \begin{cases}
p &amp; if x = 1, \\
q &amp; if x = 0.
\end{cases}\]</span></p>
<h3 id="伯努利分布的期望">2.伯努利分布的期望</h3>
<p><span class="math display">\[E[X] = \sum_{i=0}^{1}x_if(x_i)=1 \cdot p+0 \cdot p=p\]</span></p>
<h3 id="伯努利分布的方差">3.伯努利分布的方差</h3>
<p><span class="math display">\[var[X] = \sum_{i=0}^{1}(x_i-E[X])^2f(x_i) = (0-p)^2(1-p)+(1-p)^2p=p(1-p)=pq\]</span></p>
<p>当<span class="math inline">\(p=q=\frac{1}{2}\)</span>时，方差最大。</p>
]]></content>
      <categories>
        <category>probability</category>
        <category>bernoulli</category>
      </categories>
      <tags>
        <tag>bernoulli distribution</tag>
      </tags>
  </entry>
  <entry>
    <title>binomial_distribution</title>
    <url>/2021/01/25/binomial-distribution/</url>
    <content><![CDATA[<h3 id="二项分布binomial-distribution">1.二项分布(binomial distribution)</h3>
<p>两点分布重复n次，就得到了二项分布，二项分布的概率质量函数(probability mass function, PMF): n为实验的总次数，k为实验成功的次数，p是成功的概率 <span class="math display">\[ P(X=k)=C_n^kp^k(1-p)^{n-k} \]</span> 服从二项分布的随机变量记为 <span class="math inline">\(X \sim B(n,p)\)</span></p>
<h3 id="二项分布的期望">2.二项分布的期望</h3>
<p>二项分布分布，事件发生的概率为p, 不发生的概率为q=1-p, 这里的 <span class="math inline">\(C_n^k\)</span> 称为二项系数，根据二项展开式的系数，可以反推二项分布的概率和为1. <span class="math display">\[ \sum_{k=0}^nP(X=k) = \sum_{k=0}^nC_n^kp^k(1-p)^{n-k} = (p+(1-p))^n=1 \]</span> 期望是离散型随机变量的特征之一，定义如下： 设<span class="math inline">\(\xi\)</span> 为离散型随机变量，它可以取值<span class="math inline">\(x_1,x_2,x_3,...\)</span>，对应的概率为<span class="math inline">\(p_1,p_2,p_3,...\)</span> 如果级数 <span class="math display">\[\sum_{i=1}^{\infty}x_ip_i\]</span> 绝对收敛，则把它称为<span class="math inline">\(\xi\)</span>的数学期望（mathematical expectation）,简称期望，期望值或均值（mean）,记为<span class="math inline">\(E\xi\)</span> 当<span class="math inline">\(\sum_{i=1}^{\infty}{\vert}x_i{\vert}p_i\)</span> 发散时，则<span class="math inline">\(\xi\)</span>的数学期望不存在。</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
\sum_{k=0}^{n}kp_k &amp;= \sum_{k=1}{n}{n \choose k}p^kq^{n-k} \\
&amp;= np \sum_{k=1}^{n}{n-1 \choose k-1}p^{k-1}q^{n-k} \\
&amp;=np(p+q)^{n-1} \\
&amp;=np
\end{aligned}
\end{equation}\]</span></p>
<p>二项分布期望证明二:</p>
<p>设<span class="math inline">\(\xi_1,\xi_2,...\xi_n\)</span> 是n个伯努利随机变量，以概率<span class="math inline">\(P\{\xi_i=1\} = p\)</span>和<span class="math inline">\(P\{\xi_i=0\} = q,p + q = 1\)</span>, 则对于： <span class="math display">\[S_n = \xi_1+\xi_2+...+\xi_n\]</span> 根据期望的基本性质，<span class="math inline">\(S_n\)</span>的数学期望为 <span class="math display">\[ES_n = E(\xi_1)+E(\xi_2) + ... + E(\xi_n) = np \]</span> 证明的过程比第一个证明要简单快捷。</p>
<h3 id="二项分布的方差">3.二项分布的方差</h3>
<p>随机变量<span class="math inline">\(\xi\)</span>,如果<span class="math inline">\(E(\xi-E\xi)^2\)</span>存在，则称它为随机变量<span class="math inline">\(\xi\)</span>的方差（variance）. 并记为<span class="math inline">\(D\xi\)</span>，而<span class="math inline">\(\sqrt{D\xi}\)</span>称为标准差（standard deviation），描述的是随机变量 对其数学期望的偏离程度（dispersion）。</p>
<p><span class="math display">\[ E(X) = np\]</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

E(X^2) &amp;= \sum_{k=0}^{n} k^2 C_n^kp^kq^{n-k} \\
&amp;=\sum_{k=1}^{n} [k(k-1)+k]\frac{n!}{k!(n-k)!}p^kq^{n-k} \\
&amp;=\sum_{k=2}^{n} \frac{n!}{(k-2)!(n-k)!} + E(X) \\
&amp;=n(n-1)p^2 \sum_{k=2}^{n} \frac{(n-2)!}{(k-2)![(n-2) - (k-2)]!} \cdot p^{k-2}q^{(n-2)-(k-2)} +E(X) \\
&amp;=n(n-1)p^2 \sum_{k{&#39;}=0}^{n-2} C_{n-2}^k{&#39;}p^k{&#39;}q^{(n-2)-k{&#39;}} + E(X) \\
&amp;=n(n-1)p^2 + np \\
&amp;=n^2p^2 + np(1-p) \\

\end{aligned}
\end{equation}\]</span></p>
<p>由于方差恒等式<span class="math inline">\(D(X) = E(X^2) - [E(X)]^2\)</span>，所以 <span class="math inline">\(D(X) = np(1-p)\)</span></p>
<p>二项分布方差证明二：</p>
<p>设<span class="math inline">\(\xi\)</span>是伯努利随机变量，以概率<span class="math inline">\(P\{\xi_i=1\} = p\)</span>和<span class="math inline">\(P\{\xi_i=0\} = q,p + q = 1\)</span>, 根据方差的定义:</p>
<p>伯努利期望<span class="math inline">\(E\xi = p\)</span>, <span class="math display">\[ D\xi = E(\xi - E\xi)^2 = E(\xi - p)^2=(1-p)^2p + (0-p)^q = pq \]</span> 由此可见，<span class="math inline">\(\xi_1,\xi_2,...\xi_n\)</span>是独立同分布的伯努利随机变量序列，且<span class="math inline">\(S_n = \xi_1+\xi_2+...+\xi_n\)</span> 则 <span class="math display">\[DS_n = npq\]</span> 这里参考了方差的性质：如果<span class="math inline">\(\xi\)</span>和<span class="math inline">\(\eta\)</span>独立，则和<span class="math inline">\(\xi+\eta\)</span>的方差等于方差之和。 <span class="math display">\[D(\xi+\eta) = D\xi + D\eta\]</span></p>
]]></content>
      <categories>
        <category>probability</category>
        <category>binomial</category>
      </categories>
      <tags>
        <tag>binomial distribution</tag>
      </tags>
  </entry>
  <entry>
    <title>ggplot桑基图和冲击图</title>
    <url>/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/</url>
    <content><![CDATA[<p>桑基图是描述一组数据到另一组数据的流向图，可以观察数据流向的比例关系。 冲击图是一种特殊类型的流图。</p>
<h2 id="ggsankey">ggsankey</h2>
<p>ggsankey是基于ggplot2开发的一个包，用于可视化桑基图和冲击图。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># install.packages(&quot;devtools&quot;)</span></span><br><span class="line">devtools::install_github(<span class="string">&quot;davidsjoberg/ggsankey&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="ggsankey-构图元素">ggsankey 构图元素</h2>
<p><img src="/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/ggsankey_principal_aesthetics.png" alt="principal"> - 每一列表示一个stage, 每个stage有若干个node组成 - 相邻两个stage之间的node存在flow流的关系</p>
<h2 id="图形参数">图形参数</h2>
<ul>
<li>fill设置填充色，分为node.fii和flow.fill</li>
<li>color设置边框颜色，可分为node.color和flow.color</li>
<li>width设置node宽度</li>
<li>flow.alpha设置flow的透明度</li>
<li>space设置组内node的间距 <img src="/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/README-unnamed-chunk-4-1.png" alt="parameter"></li>
</ul>
<h2 id="测试数据">测试数据</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggsankey)</span><br><span class="line">library(dplyr)</span><br><span class="line">library(ggplot2)</span><br><span class="line"></span><br><span class="line">df &lt;- mtcars %&gt;%</span><br><span class="line">  make_long(cyl, vs, am, gear, carb)</span><br><span class="line"></span><br><span class="line">ggplot(df, aes(x = x, </span><br><span class="line">               next_x = next_x, </span><br><span class="line">               node = node, </span><br><span class="line">               next_node = next_node,</span><br><span class="line">               fill = factor(node))) +</span><br><span class="line">  geom_sankey()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure>
<img src="/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/README-example-1.png" alt="example1"><figcaption>example1</figcaption>
</figure>
<ul>
<li>标注node名称</li>
<li><p>主题设置 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(df, aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = factor(node), label = node)) +</span><br><span class="line">  geom_sankey(flow.alpha = <span class="number">.6</span>,</span><br><span class="line">              node.color = <span class="string">&quot;gray30&quot;</span>) +</span><br><span class="line">  geom_sankey_label(size = <span class="number">3</span>, color = <span class="string">&quot;white&quot;</span>, fill = <span class="string">&quot;gray40&quot;</span>) +</span><br><span class="line">  scale_fill_viridis_d() +</span><br><span class="line">  theme_sankey(base_size = <span class="number">18</span>) +</span><br><span class="line">  labs(x = <span class="literal">NULL</span>) +</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        plot.title = element_text(hjust = <span class="number">.5</span>)) +</span><br><span class="line">  ggtitle(<span class="string">&quot;Car features&quot;</span>)</span><br></pre></td></tr></table></figure> <img src="/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/README-sankey-1.png" alt="example2"></p></li>
<li><p>geom_alluvial冲击图 冲积图与桑基图非常相似，但节点之间没有空间，并且以y = 0开始，而不是以x轴为中心。</p></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggplot(df, aes(x = x, next_x = next_x, node = node, next_node = next_node, fill = factor(node), label = node)) +</span><br><span class="line">  geom_alluvial(flow.alpha = <span class="number">.6</span>) +</span><br><span class="line">  geom_alluvial_text(size = <span class="number">3</span>, color = <span class="string">&quot;white&quot;</span>) +</span><br><span class="line">  scale_fill_viridis_d() +</span><br><span class="line">  theme_alluvial(base_size = <span class="number">18</span>) +</span><br><span class="line">  labs(x = <span class="literal">NULL</span>) +</span><br><span class="line">  theme(legend.position = <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        plot.title = element_text(hjust = <span class="number">.5</span>)) +</span><br><span class="line">  ggtitle(<span class="string">&quot;Car features&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2023/11/16/ggplot%E6%A1%91%E5%9F%BA%E5%9B%BE%E5%92%8C%E5%86%B2%E5%87%BB%E5%9B%BE/README-alluvial-1.png" alt="example3"><figcaption>example3</figcaption>
</figure>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>mathematical_symbol</title>
    <url>/2021/02/04/mathematical-symbol/</url>
    <content><![CDATA[<h1 id="希腊字母">希腊字母</h1>
<p><span class="math display">\[
\begin{array}{|c|c|c|c|c|c|c|c|}
\hline
{\alpha} &amp; {\backslash alpha} &amp; {\theta} &amp; {\backslash theta} &amp; {o} &amp; {o} &amp; {\upsilon} &amp; {\backslash upsilon} \\\\
\hline
{\beta} &amp; {\backslash beta} &amp; {\vartheta} &amp; {\backslash vartheta} &amp; {\pi} &amp; {\backslash pi} &amp; {\phi} &amp; {\backslash phi} \\\\
\hline
{\gamma} &amp; {\backslash gamma} &amp; {\iota} &amp; {\backslash iota} &amp; {\varpi} &amp; {\backslash varpi} &amp; {\varphi} &amp; {\backslash varphi} \\\\
\hline
{\delta} &amp; {\backslash delta} &amp; {\kappa} &amp; {\backslash kappa} &amp; {\rho} &amp; {\backslash rho} &amp; {\chi} &amp; {\backslash chi} \\\\
\hline
{\epsilon} &amp; {\backslash epsilon} &amp; {\lambda} &amp; {\backslash lambda} &amp; {\varrho} &amp; {\backslash varrho} &amp; {\psi} &amp; {\backslash psi} \\\\
\hline
{\varepsilon} &amp; {\backslash varepsilon} &amp; {\mu} &amp; {\backslash mu} &amp; {\sigma} &amp; {\backslash sigma} &amp; {\omega} &amp; {\backslash omega} \\\\
\hline
{\zeta} &amp; {\backslash zeta} &amp; {\nu} &amp; {\backslash nu} &amp; {\varsigma} &amp; {\backslash varsigma} &amp; {} &amp; {} \\\\
\hline
{\eta} &amp; {\backslash eta} &amp; {\xi} &amp; {\backslash xi} &amp; {\tau} &amp; {\backslash tau} &amp; {} &amp; {} \\\\
\hline
{\Gamma} &amp; {\backslash Gamma} &amp; {\Lambda} &amp; {\backslash Lambda} &amp; {\Sigma} &amp; {\backslash Sigma} &amp; {\Psi} &amp; {\backslash Psi} \\\\
\hline
{\Delta} &amp; {\backslash Delta} &amp; {\Xi} &amp; {\backslash Xi} &amp; {\Upsilon} &amp; {\backslash Upsilon} &amp; {\Omega} &amp; {\backslash Omega} \\\\
\hline
{\Omega} &amp; {\backslash Omega} &amp; {\Pi} &amp; {\backslash Pi} &amp; {\Phi} &amp; {\backslash Phi} &amp; {} &amp; {} \\\\
\hline
\end{array}
\]</span></p>
]]></content>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>normal_distribution</title>
    <url>/2021/01/23/normal-distribution/</url>
    <content><![CDATA[<h1 id="正态分布">正态分布</h1>
<p><span class="math display">\[f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^\frac{(x-\mu)^2}{2\sigma^2}\]</span></p>
<h1 id="正太分布的推导">正太分布的推导</h1>
<p>这里介绍高斯的推导方法，采用误差</p>
<p><span class="math display">\[\begin{align*}
L(\theta) &amp;= L(\theta;x_1,\cdots,x_n)=f(e_1)\cdots f(e_n) \\
&amp; = f(x_1-\theta)\cdots f(x_n-\theta)
\end{align*}\]</span></p>
<p><span class="math inline">\(\frac{d \log L(\theta)}{d \theta} = 0\)</span></p>
<p><span class="math inline">\(\sum_{i=1}^n \frac{f&#39;(x_i-\theta)}{f(x_i-\theta)} = 0\)</span></p>
<p>令 <span class="math inline">\(g(x) = \frac{f&#39;(x)}{f(x)}\)</span></p>
<p><span class="math inline">\(\sum_{i=1}^n g(x_i-\theta) = 0\)</span></p>
<p><span class="math display">\[\begin{equation}
\sum_{i=1}^n g(x_i-\bar{x}) = 0 \quad  (1)
\end{equation}\]</span></p>
<ol type="1">
<li>式中取 <span class="math inline">\(n=2\)</span>, 有</li>
</ol>
<p><span class="math inline">\(g(x_1-\bar{x}) + g(x_2-\bar{x}) = 0\)</span></p>
<p>由于此时有 <span class="math inline">\(x_1-\bar{x} = -(x_2-\bar{x})\)</span></p>
]]></content>
  </entry>
  <entry>
    <title>possion_distribution</title>
    <url>/2021/01/19/possion-distribution/</url>
    <content><![CDATA[<p>泊松分布，二项分布的极限形式，广泛应用于管理科学，运筹学，自然科学中。生活中某个十字路口在一定时间内经过的车辆数，就服从泊松分布。 它描述的是在单位时间（空间）内随机事件发生的次数。 泊松分布的推导如下：</p>
<h1 id="二项分布binomial-distribution">二项分布(binomial distribution)</h1>
<p>两点分布重复n次，就得到了二项分布，二项分布的概率质量函数(probability mass function, PMF): n为实验的总次数，k为实验成功的次数，p是成功的概率 <span class="math display">\[ P(X=k)=C_n^kp^k(1-p)^{n-k} \]</span> 服从二项分布的随机变量记为 <span class="math inline">\(X \sim B(n,p)\)</span></p>
<h2 id="二项分布的期望">二项分布的期望</h2>
<p>二项分布分布，事件发生的概率为p, 不发生的概率为q=1-p, 这里的 <span class="math inline">\(C_n^k\)</span> 称为二项系数，根据二项展开式的系数，可以反推二项分布的概率和为1. <span class="math display">\[ \sum_{k=0}^nP(X=k) = \sum_{k=0}^nC_n^kp^k(1-p)^{n-k} = (p+(1-p))^n=1 \]</span> 期望是离散型随机变量的特征之一，定义如下： 设<span class="math inline">\(\xi\)</span> 为离散型随机变量，它可以取值<span class="math inline">\(x_1,x_2,x_3,...\)</span>，对应的概率为<span class="math inline">\(p_1,p_2,p_3,...\)</span> 如果级数 <span class="math display">\[\sum_{i=1}^{\infty}x_ip_i\]</span> 绝对收敛，则把它称为<span class="math inline">\(\xi\)</span>的数学期望（mathematical expectation）,简称期望，期望值或均值（mean）,记为<span class="math inline">\(E\xi\)</span> 当<span class="math inline">\(\sum_{i=1}^{\infty}{\vert}x_i{\vert}p_i\)</span> 发散时，则<span class="math inline">\(\xi\)</span>的数学期望不存在。</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
\sum_{k=0}^{n}kp_k &amp;= \sum_{k=1}{n}{n \choose k}p^kq^{n-k} \\
&amp;= np \sum_{k=1}^{n}{n-1 \choose k-1}p^{k-1}q^{n-k} \\
&amp;=np(p+q)^{n-1} \\
&amp;=np 
\end{aligned}
\end{equation}\]</span></p>
<h2 id="二项分布的方差">二项分布的方差</h2>
<p>随机变量<span class="math inline">\(\xi\)</span>,如果<span class="math inline">\(E(\xi-E\xi)^2\)</span>存在，则称它为随机变量<span class="math inline">\(\xi\)</span>的方差（variance）. 并记为<span class="math inline">\(D\xi\)</span>，而<span class="math inline">\(\sqrt{D\xi}\)</span>称为标准差（standard deviation），描述的是随机变量 对其数学期望的偏离程度（dispersion）。</p>
<p><span class="math display">\[ E(X) = np\]</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

E(X^2) &amp;= \sum_{k=0}^{n} k^2 C_n^kp^kq^{n-k} \\
&amp;=\sum_{k=1}^{n} [k(k-1)+k]\frac{n!}{k!(n-k)!}p^kq^{n-k} \\
&amp;=\sum_{k=2}^{n} \frac{n!}{(k-2)!(n-k)!} + E(X) \\
&amp;=n(n-1)p^2 \sum_{k=2}^{n} \frac{(n-2)!}{(k-2)![(n-2) - (k-2)]!} \cdot p^{k-2}q^{(n-2)-(k-2)} +E(X) \\
&amp;=n(n-1)p^2 \sum_{k{&#39;}=0}^{n-2} C_{n-2}^k{&#39;}p^k{&#39;}q^{(n-2)-k{&#39;}} + E(X) \\
&amp;=n(n-1)p^2 + np \\
&amp;=n^2p^2 + np(1-p) \\

\end{aligned}
\end{equation}\]</span></p>
<p>由于方差恒等式<span class="math inline">\(D(X) = E(X^2) - [E(X)]^2\)</span>，所以 <span class="math inline">\(D(X) = np(1-p)\)</span></p>
<h1 id="泊松分布possion-distribution">泊松分布(possion distribution)</h1>
<p>在下面的情形下，<span class="math inline">\(n \to \infty,\,p,\,\lambda &gt; 0,\,\lambda=np,\,p = \frac{\lambda}{n}\)</span> <span class="math display">\[P(X=k)=\displaystyle \lim_{n \to \infty} C_n^k \cdot (\frac{\lambda}{n})^k \cdot (1-\frac{\lambda}{n})^{n-k}\]</span> <span class="math display">\[C_n^k \cdot (\frac{\lambda}{n})^k \cdot (1-\frac{\lambda}{n})^{n-k}=\frac{1}{k!} \cdot \frac{n(n-1)...(n-k+1)}{n^k} \cdot \lambda^k \cdot\frac{(1-\frac{\lambda}{n})^n}{(1-\frac{\lambda}{n})^k}\]</span> 因为<span class="math inline">\(n \to \infty\)</span>, k不变，第二个因子</p>
<p><span class="math display">\[\displaystyle \lim_{n \to \infty} \frac{n(n-1)...(n-k+1)}{n^k}=\frac{n}{n} \cdot \frac{n-1}{n}...\frac{n-(k-1)}{n}=1\]</span></p>
<p>第四个因子中的分母</p>
<p><span class="math display">\[\displaystyle \lim_{n \to \infty}(1-\frac{\lambda}{n})^k = 1\]</span></p>
<p>第四个因子中的分子 <span class="math display">\[(1-\frac{\lambda}{n})^n = [(1-\frac{\lambda}{n})^{-\frac{n}{\lambda}}]^{-\lambda}\]</span> 因为 <span class="math inline">\(\displaystyle \lim_{n \to \infty} (1-\frac{\lambda}{n})^{-\frac{n}{\lambda}} = e\)</span>，所以 <span class="math inline">\((1-\frac{\lambda}{n})^n = e^{-\lambda}\)</span></p>
<p>因此 <span class="math display">\[\displaystyle \lim_{n \to \infty} C_n^k \cdot (\frac{\lambda}{n})^k \cdot (1-\frac{\lambda}{n})^{n-k}=\frac{\lambda^k}{k!}e^{-\lambda}\]</span> 综上 <span class="math display">\[P(X=k)=\frac{\lambda^k}{k!}e^{-\lambda},k=0,1,2...\]</span> 服从泊松分布随机变量记为 <span class="math inline">\(X \sim p(\lambda)\)</span> 在应用中，当p相当小（p &lt;= 0.1）时，我们用下面的近似公式 <span class="math inline">\(b(k;n,p) \sim \frac{(np)^k}{k!}e^{-np}\)</span></p>
<h2 id="泊松分布期望">泊松分布期望</h2>
<p>证明泊松分布的概率和为1 <span class="math display">\[ \sum_{k=0}^{\infty}p(k;\lambda) = \sum_{k=0}^{\infty} \frac{\lambda^k}{k!}e^{-\lambda}=e^{-\lambda} \cdot e^{\lambda}=1\]</span> <span class="math inline">\(e^{\lambda} = \sum_{k=0}^{\infty} \frac{\lambda^k}{k!}\)</span> 为指数函数的泰勒展开式</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
\sum_{k=0}^{\infty}kp_k &amp;= \sum_{k=1}^{\infty}k \cdot \frac{\lambda^k}{k!}e^{-\lambda} \\
&amp;=\lambda e^{-\lambda}\sum_{k=1}^{\infty}\frac{\lambda^{k-1}}{(k-1)!} \\
&amp;=\lambda e^{-\lambda} \cdot e^\lambda \\
&amp;=\lambda

\end{aligned}
\end{equation}\]</span></p>
<h2 id="泊松分布方差">泊松分布方差</h2>
<p>方差的推导如下： 对于泊松分布期望：<span class="math inline">\(E(\xi)=\lambda\)</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
E(\xi)^2 &amp;= \sum k^2p_k \\
&amp;=\sum_{k=1}^{\infty}k^2 \cdot \frac{\lambda^k}{k!}e^{-\lambda} \\
&amp;=\sum_{k=1}^{\infty}k \frac{\lambda^k}{(k-1)!} e^{-\lambda} \\
&amp;=\sum_{k=1}^{\infty} [(k-1)+1] \cdot \frac{\lambda^k}{(k-1)!} e^{-\lambda} \\
&amp;=\sum_{k=2}^{\infty} \frac{\lambda^k}{(k-2)!}e^{-\lambda} + \sum_{k=1}^{\infty} \frac{\lambda^k}{(k-1)!}e^{-\lambda} \\
&amp;=\lambda^2\sum_{k{&#39;}=0}^{\infty} \frac{\lambda^k{&#39;}}{(k{&#39;})!}e^{-\lambda} + \lambda\sum_{k{&#39;&#39;}=0}^{\infty} \frac{\lambda^k{&#39;&#39;}}{(k{&#39;&#39;})!}e^{-\lambda} \\
&amp;=\lambda^2+\lambda
\end{aligned}
\end{equation}\]</span></p>
<p><span class="math display">\[D\xi = E(\xi^2) - [E(\xi)]^2 = \lambda^2+\lambda -\lambda^2 = \lambda\]</span> 附方差恒等式的证明 <span class="math display">\[D\xi = E(\xi^2) - [E(\xi)]^2 \]</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

D(\xi) &amp;= E[\xi - E(\xi)]^2 \\
&amp;=E{\xi^2 - 2E(\xi) \cdot \xi +[E(\xi)]^2} \\
&amp;=E(\xi^2) - E[2E(\xi) \cdot \xi] + E[E(\xi)]^2 \\
&amp;=E(\xi^2) - 2E(\xi) \cdot E(\xi) + [E(\xi)]^2\\
&amp;=E(\xi^2) - [E(\xi)]^2

\end{aligned}
\end{equation}\]</span></p>
<p>方差恒等式证明二： 以<span class="math inline">\(\xi \sim p(\xi)\)</span>为例</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

D(\xi) &amp;= \int_{-\infty}^{\infty}[\xi - E(\xi)]^2p(\xi)d\xi \\
&amp;=\int_{-\infty}^{\infty}\{\xi^2 - 2E(\xi) \cdot \xi + [E(\xi)]^2\}p(\xi)d\xi \\
&amp;=\int_{-\infty}^{\infty}\xi^2p(\xi)d\xi - 2E(\xi)\int_{-\infty}^{\infty}\xi p(\xi)d\xi + [E(\xi)]^2\int_{-\infty}^{\infty}p(\xi)d\xi \\
&amp;=E(\xi^2) - 2E(\xi) \cdot E(\xi) + [E(\xi)]^2 \cdot 1 \\
&amp;=E(\xi^2) - [E(\xi)]^2

\end{aligned}
\end{equation}\]</span></p>
]]></content>
      <categories>
        <category>probability</category>
        <category>possion</category>
      </categories>
      <tags>
        <tag>二项分布</tag>
        <tag>泊松分布</tag>
      </tags>
  </entry>
  <entry>
    <title>python函数递归</title>
    <url>/2023/11/17/python%E5%87%BD%E6%95%B0%E9%80%92%E5%BD%92/</url>
    <content><![CDATA[<h2 id="python-函数递归-recursion">python 函数递归 (recursion)</h2>
<p>Python中能使用循环替代递归的尽量使用，但是有时候为了代码的可读性、简洁性必须使用递归。</p>
<ul>
<li>例如求一个嵌套列表的和 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,[<span class="number">2</span>,[<span class="number">3</span>,<span class="number">4</span>],<span class="number">5</span>],<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>]] </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumtree</span>(<span class="params">L: <span class="built_in">list</span></span>) -&gt; int:</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, <span class="built_in">list</span>):</span><br><span class="line">            total += x          <span class="comment"># 对于数字直接求和</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            total += sumtree(x) <span class="comment"># 递归调用自身，循环子列表</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure></li>
<li>阶乘</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1*2*3*4*5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calc_factorial</span>(<span class="params">x: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (x * calc_factorial(x-<span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="递归的优点">递归的优点</h2>
<ul>
<li>代码干净整洁，可读性强</li>
<li>将复杂的任务分解成简单的子任务</li>
</ul>
<h2 id="递归缺点">递归缺点</h2>
<ul>
<li>递归占用大量内存和时间</li>
<li>递归函数调试困难</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
  </entry>
  <entry>
    <title>sigmoid求导</title>
    <url>/2021/05/08/sigmoid%E6%B1%82%E5%AF%BC/</url>
    <content><![CDATA[<h1 id="sigmoid">sigmoid</h1>
<p>sigmoid 函数是机器学习常用的一种激活函数，公式如下： <span class="math display">\[
f(x) = \frac{1}{1+e^{-x}} 
\]</span></p>
<h1 id="求导">求导</h1>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

f(x)^{\prime} &amp;= ((1+e^{-x})^{-1})^{\prime} \\
&amp;= (-1)\times(1+e^{-x})^{-2} \times e^{-x} \times (-1) \\
&amp;= (1+e^{-x})^{-2} \times e^{-x} \\
&amp;= \frac{e^{-x}}{(1+e^{-x})^2} \\
&amp;= \frac{1+e^{-x}-1}{(1+e^{-x})^2} \\
&amp;= \frac{1+e^{-x}}{(1+e^{-2})^2} - \frac{1}{(1+e^{-x})^2} \\
&amp;= \frac{1}{1+e^{-x}} - \frac{1}{(1+e^{-x})^2} \\
&amp;= \frac{1}{1+e^{-x}}(1-\frac{1}{1+e^{-x}}) \\
&amp;= f(x)(1-f(x))

\end{aligned}
\end{equation}\]</span></p>
]]></content>
  </entry>
  <entry>
    <title>tanh激活函数</title>
    <url>/2021/05/10/tanh%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="tanh">tanh</h1>
<p>tanh 函数是机器学习常用的一种激活函数，公式如下： <span class="math display">\[
f(x) = \frac{e^x-e^{-x}}{e^x+e^{-x}}
\]</span> tanh 的函数取值为(-1,1)，相比sigmoid的是(0,1). 两函数的图形形状类似。</p>
<h1 id="求导">求导</h1>
<p>根据乘法法则，可知 <span class="math display">\[
(uv)^{\prime} = u^{\prime}v + uv^{\prime}
\]</span></p>
<p>所以对于<span class="math inline">\(tanh(x)\)</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

tanh(x)^{\prime} &amp;= \frac{d}{dx}(\frac{e^x-e^{-x}}{e^x+e{-x}}) \\
&amp;= \frac{1}{e^x+e^{-x}}\frac{d}{dx}(e^x-e^{-x}) + (e^x-e^{-x})\frac{d}{dx}(\frac{1}{e^x+e^{-x}}) \\
&amp;= \frac{e^x+e^{-x}}{e^x+e^{-x}} + (e^x-e^{-x})\frac{1}{(e^x+e^{-x})^2}(-1)(e^x-e^{-x}) \\
&amp;= 1 - (\frac{e^x-e^{-x}}{e^x+e^{-x}})^2\\
&amp;= 1 - (tanh(x))^2

\end{aligned}
\end{equation}\]</span></p>
]]></content>
  </entry>
  <entry>
    <title>伯努利大数定理</title>
    <url>/2021/02/03/%E4%BC%AF%E5%8A%AA%E5%88%A9%E5%A4%A7%E6%95%B0%E5%AE%9A%E7%90%86/</url>
    <content><![CDATA[<h1 id="伯努利大数定理law-of-large-numbers">伯努利大数定理(Law of Large Numbers)</h1>
<p>伯努利分布也称两点分布,相关的描述和证明见<a href="http://www.zhusitao.cn/2021/01/25/bernoulli-distribution/">伯努利分布</a></p>
<h2 id="伯努利概型">伯努利概型</h2>
<p><span class="math inline">\(\Omega\)</span>,<span class="math inline">\(\mathscr{A}\)</span>,<span class="math inline">\(P\)</span> ,其中 <span class="math inline">\(\Omega=\{\omega:\omega=(a_1,...a_n),a_i=0,1\}\)</span></p>
<p><span class="math inline">\(\mathscr{A}=\{A:A \subset \Omega\}\)</span> , <span class="math inline">\(P(\{\omega\})=p^{\sum a_i}(1-p)^{n-\sum a_i}=p(\omega)\)</span></p>
<p>上面定义的三对象，称作伯努利概型。白话就是“有两种结局的n次独立试验的概率模型”</p>
<p>对于二项分布而言，<span class="math inline">\(ES_n = np\)</span> <span class="math inline">\(E\frac{S_n}{n} = p\)</span>,即成功的频率<span class="math inline">\(S_n/n\)</span>的平均值等于成功的概率。那么成功的频率对成功的概率的偏差如何呢？ 这里需要借助切比雪夫不等式。</p>
<h2 id="切比雪夫不等式">切比雪夫不等式</h2>
<p>设(<span class="math inline">\(\Omega\)</span>,<span class="math inline">\(\mathscr{A}\)</span>,<span class="math inline">\(P\)</span>)是某一概率空间，<span class="math inline">\(\xi=\xi(\omega)\)</span> 是非负随机变量，那么对于任意的<span class="math inline">\(\varepsilon&gt;0\)</span>,</p>
<p><span class="math display">\[
P\{\xi\geq\varepsilon\} \leq \frac{E\xi}{\varepsilon}
\]</span></p>
<p>切比雪夫不等式证明： 根据示性函数的性质，</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

\xi &amp;=\xi I(\xi \geq \varepsilon) + \xi I(\xi &lt; \varepsilon) \\
&amp;\geq \xi I(\xi \geq \varepsilon) \\
&amp;\geq \varepsilon I(\xi \geq \varepsilon) \\

\end{aligned}
\end{equation}\]</span></p>
<p>所以 <span class="math inline">\(\xi \geq \varepsilon I(\xi \geq \varepsilon)\)</span> 根据期望的性质 <span class="math display">\[\begin{equation}
\begin{aligned}
E\xi &amp;\geq E\varepsilon I(\xi \geq \varepsilon) \\
&amp;\geq \varepsilon E I(\xi \geq \varepsilon) = \varepsilon P\{\xi \geq \varepsilon\} 
\end{aligned}
\end{equation}\]</span> 不等式得证。</p>
<h2 id="切比雪夫不等式的另一种表达方式">切比雪夫不等式的另一种表达方式</h2>
<p>设随机变量<span class="math inline">\(X\)</span>的数学期望和方差都存在，对于任意的常数<span class="math inline">\(\varepsilon\)</span>有： <span class="math display">\[
P(|X-E(X)| \geq \varepsilon) \leq \frac{Var(X)}{\varepsilon^2}
\]</span> 或者 <span class="math display">\[
P(|X-E(X)| \leq \varepsilon) \geq 1- \frac{Var(X)}{\varepsilon^2}
\]</span> 证明如下： 设<span class="math inline">\(X\)</span>是一个连续的随机变量，其密度函数为<span class="math inline">\(p(x)\)</span>,记<span class="math inline">\(E(X)=a\)</span></p>
<p><span class="math display">\[\begin{align*}
P(|X-a|\geq\varepsilon) &amp;= \int\limits_{\{x:|x-a|\geq\varepsilon\}} \quad p(x)dx \\
&amp;\leq \int \limits_{\{x:|x-a|\geq\varepsilon\}} \quad \frac{(x-a)^2}{\varepsilon^2}p(x)dx \\
&amp;\leq \frac{1}{\varepsilon^2}\int_{-\infty}^{+\infty}(x-a)^2p(x)dx = \frac{Var(x)}{\varepsilon^2} 

\end{align*}\]</span></p>
<p>此证明的第一个不等式，是由于 <span class="math inline">\(|X-E(X)| \geq \varepsilon\)</span>得出，第二个不等式是积分区间的扩大导致的。 该切比雪夫不等式的证明，将<span class="math inline">\(\xi = X-E(X)\)</span>,则就是第一个切比雪夫不等式的证明推导。</p>
<h1 id="证明伯努利概型大数定理">证明伯努利概型大数定理</h1>
<p><span class="math display">\[
\lim_{n \to \infty}P(|\frac{S_n}{n}-p|\le \varepsilon) = 1
\]</span></p>
<p>证明:</p>
<p><span class="math display">\[\begin{align*}

1 &amp;\geq P(|\frac{S_n}{n}-p| \leq \varepsilon) \\
&amp;\geq 1 - \frac{Var(\frac{S_n}{n})}{\varepsilon^2} = 1- \frac{p(1-p)}{n^2\varepsilon^2}

\end{align*}\]</span></p>
<p>当<span class="math inline">\(n\)</span>趋近与<span class="math inline">\(\infty\)</span>时，上式趋近与1,事件发生的频率趋近与概率。</p>
]]></content>
      <tags>
        <tag>大数定理</tag>
        <tag>Law of Large Numbers</tag>
      </tags>
  </entry>
  <entry>
    <title>伽玛函数</title>
    <url>/2021/02/20/%E4%BC%BD%E7%8E%9B%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="阶乘">阶乘</h1>
<p>对于任意自然数，<span class="math inline">\(0,1,2,...,n\)</span>的阶乘的定义为 <span class="math inline">\(n! = 1\times 2 \times 3 ... \times n\)</span></p>
<p>但是<span class="math inline">\(0.5!\)</span>怎么计算呢？</p>
<h1 id="伽玛函数">伽玛函数</h1>
<p>1728年，哥德巴赫在考虑数值插值问题时提出的，如何将自然数的阶乘推广到实数集。 将数据点<span class="math inline">\((n,n!)\)</span>画在图形上，好像可以看出大致的趋势，但是无法从数学的角度严 格证明。于是请教同时期的伯努利兄弟。由于欧拉当时还是丹尼尔伯努利的助手。 因此欧拉也得知这个问题，第二年，即1729年，欧拉给出了完美的数据公式， 从此完成了阶乘向实数集的拓展，此时欧拉大神22岁。</p>
<h2 id="年欧拉定义">1730年欧拉定义</h2>
<p><span class="math display">\[
\Gamma(x) = \displaystyle \int^{1}_{0}( -log(t))^{x-1}dt
\]</span></p>
<p>令 <span class="math inline">\(t=e^{-u}\)</span>,由于<span class="math inline">\(t \in (0,1)\)</span>，所以<span class="math inline">\(u \in (0,\infty)\)</span> <span class="math display">\[
\Gamma(x) = \displaystyle \int^{\infty}_{0}u^{x-1}e^{-u}du
\]</span> 令<span class="math inline">\(u=x, x=s\)</span>，则得到了伽玛函数的一般形式。 <span class="math display">\[\begin{equation}
\Gamma(s) = \displaystyle \int^{+\infty}_{0}{x^{s-1}e^{-x}dx}
\end{equation}\]</span></p>
<h2 id="证明过程需要使用分部积分法">证明过程需要使用分部积分法</h2>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

\Gamma(s+1) &amp;= \displaystyle \int^{+\infty}_{0}{x^{s}e^{-x}dx} \\
&amp;= -\displaystyle \int^{\infty}_{0}{x^{s}d(e^{-x})} \\
&amp;= -((x^s e^{-x}|_{0}^{\infty}) - (\displaystyle \int^{\infty}_{0}e^{-x}d(-x^s))) \\
&amp;= -((x^s e^{-x}|_{0}^{\infty}) - \displaystyle \int^{\infty}_{0}s x^{s-1}e^{-x}dx) \\
&amp;= s\Gamma(s)
\end{aligned}
\end{equation}\]</span></p>
<p><span class="math display">\[
\Gamma(1) = \displaystyle \int^{\infty}_{0}e^{-x}dx = 1
\]</span> 规定<span class="math inline">\(0!=1\)</span> 由上面的证明可知，伽玛函数具有递归性质，可以用来进行阶乘的计算。 则<span class="math inline">\(\Gamma(n+1)=n!\)</span>，因此对于任意的数都可以进行阶乘计算。 回到上面的<span class="math inline">\(0.5!\)</span>的计算。</p>
<p><span class="math inline">\(0.5!=\Gamma(0.5+1)=\displaystyle \int^{+\infty}_{0}{x^{0.5}e^{-x}dx}=\frac{1}{2}\sqrt{\pi}\)</span></p>
<h1 id="伽玛分布">伽玛分布</h1>
<p>因为伽玛函数的一般表达式为<span class="math inline">\(\Gamma(\alpha) = \displaystyle \int^{+\infty}_{0}{x^{\alpha-1}e^{-x}dx}\)</span> 等式两边同时除以<span class="math inline">\(\Gamma(\alpha)\)</span>,则得</p>
<p><span class="math inline">\(1=\displaystyle \int^{+\infty}_{0}\frac{x^{\alpha-1}e^{-x}}{\Gamma(\alpha)}d(x)\)</span></p>
<p>令 <span class="math inline">\(x=\lambda x\)</span>，代入上式， 则上式如下： <span class="math display">\[\begin{equation}
\begin{aligned}
1 &amp;= \displaystyle \int^{+\infty}_{0}\frac{x^{\alpha-1}e^{-x}}{\Gamma(\alpha)}d(x) \\
&amp;= \displaystyle \int^{+\infty}_{0}\frac{(\lambda x)^{\alpha-1}e^{-(\lambda x)}}{\Gamma(\alpha)}d(\lambda x) \\
&amp;= \displaystyle \int^{+\infty}_{0}\frac{(\lambda x)^{\alpha-1}e^{-\lambda x}}{\Gamma(\alpha)} \cdot \lambda d(x) \\
&amp;= \displaystyle \int^{+\infty}_{0}\frac{\lambda^\alpha x^{\alpha-1}e^{-\lambda x}}{\Gamma(\alpha)}d(x) \\
\end{aligned}
\end{equation}\]</span></p>
<p>取上式中的的被积函数作为伽马分布的密度函数</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
p(x) &amp;= \frac{\lambda^\alpha x^{\alpha-1}e^{-\lambda x}}{\Gamma(\alpha)} \\
&amp;= \frac{\lambda^\alpha}{\Gamma(\alpha)} x^{\alpha-1}e^{-\lambda x}
\end{aligned}
\end{equation}\]</span></p>
<h2 id="伽玛分布的期望和方差">伽玛分布的期望和方差</h2>
<h3 id="期望的证明">期望的证明</h3>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
E(x) &amp;= \sum p(x_i)\cdot x_i \\
&amp;= \frac{\lambda^\alpha}{\Gamma(\alpha)} \displaystyle \int^{+\infty}_{0} x^{\alpha-1}e^{-\lambda x} d(x)
\end{aligned}
\end{equation}\]</span></p>
<p>因为 <span class="math inline">\(\Gamma(\alpha+1) = \displaystyle \int^{+\infty}_{0} x^{\alpha}e^{-\lambda x}\)</span>,</p>
<p>令<span class="math inline">\(x=\lambda x\)</span>,则<span class="math inline">\(\Gamma(\alpha+1)\)</span> <span class="math display">\[\begin{equation}
\begin{aligned}
\Gamma(\alpha+1) &amp;= \displaystyle \int^{+\infty}_{0} \lambda^\alpha x^{\alpha}e^{-\lambda x} d(\lambda x)d(x) \\
&amp;=\lambda \displaystyle \int^{+\infty}_{0} \lambda^\alpha x^{\alpha}e^{-\lambda x} d(x)
\end{aligned}
\end{equation}\]</span></p>
<p>所以 <span class="math display">\[\begin{equation}
\begin{aligned}
E(x) &amp;= \frac{\frac{\Gamma(\alpha+1)}{\lambda}}{\Gamma(x)} \\
&amp;= \frac{\Gamma(\alpha+1)}{\Gamma(\alpha)}\cdot\frac{1}{\lambda} \\
&amp;= \frac{\alpha}{\lambda}
\end{aligned}
\end{equation}\]</span></p>
<h3 id="方差的证明">方差的证明</h3>
<p>因为<span class="math inline">\(p(x) = \frac{\lambda^\alpha}{\Gamma(\alpha)}x^(\alpha-1)e^{-\lambda x}\)</span>, 所以对于离散型随机变量，<span class="math inline">\(E(x^2) = p(x)\cdot x^2\)</span> 对于连续型随机变量，二阶原点矩如下： <span class="math display">\[\begin{equation}
\begin{aligned}
E(x^2) &amp;= \displaystyle \int^{+\infty}_{0} x^2 \frac{\lambda^\alpha}{\Gamma(\alpha)} x^{\alpha-1}e^{-\lambda x}d(x) \\
&amp;= \displaystyle \int^{+\infty}_{0}\frac{\lambda^\alpha}{\Gamma(\alpha)} x^{\alpha+1}e^{-\lambda x}d(x)
\end{aligned}
\end{equation}\]</span></p>
<p>因为<span class="math inline">\(\Gamma(\alpha+1)=\lambda \displaystyle \int^{+\infty}_{0} \lambda^\alpha x^{\alpha}e^{-\lambda x}d(x)\)</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
\Gamma(\alpha+2) &amp;= \lambda \displaystyle \int^{+\infty}_{0} \lambda^{\alpha+1} x^{\alpha+1}e^{-\lambda x}d(x) \\
&amp;= \lambda^2 \displaystyle \int^{+\infty}_{0} \lambda^\alpha x^{\alpha+1}e^{-\lambda x}d(x) 
\end{aligned}
\end{equation}\]</span></p>
<p>由上式可知<span class="math inline">\(\displaystyle \int^{+\infty}_{0} \lambda^\alpha x^{\alpha+1}e^{-\lambda x} d(x) = \frac{\Gamma(\alpha+2)}{\lambda^2}\)</span> <span class="math display">\[\begin{equation}
\begin{aligned}
E(x^2) &amp;= \frac{\displaystyle \int^{+\infty}_{0}\lambda^\alpha x^{\alpha+1}e^{-\lambda x}d(x)}{\Gamma(\alpha)} \\
&amp;= \frac{\Gamma(\alpha+2)}{\lambda^2\Gamma(\alpha)} \\
&amp;= \frac{\alpha(\alpha+1)}{\lambda^2}
\end{aligned}
\end{equation}\]</span></p>
<p>根据方差的性质<span class="math inline">\(Var(x) = E(x^2) - E(x)^2\)</span></p>
<p>所以伽玛分布的方差为： <span class="math display">\[\begin{equation}
\begin{aligned}
Var(x) &amp;= \frac{\alpha(\alpha+1)}{\lambda^2} - {(\frac{\alpha}{\lambda})}^2 \\
&amp;= \frac{\alpha}{\lambda^2}
\end{aligned}
\end{equation}\]</span></p>
]]></content>
      <tags>
        <tag>伽玛函数</tag>
        <tag>阶乘</tag>
      </tags>
  </entry>
  <entry>
    <title>几何分布</title>
    <url>/2021/03/11/%E5%87%A0%E4%BD%95%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<h1 id="几何分布">几何分布</h1>
<p>时间A发生的概率为p的伯努利实验中，<span class="math inline">\(\xi\)</span>记为事件A首次出现的 实验次数，则称随机变量<span class="math inline">\(\xi\)</span>服从几何分布，</p>
<p><span class="math display">\[
g(k,p) = P(\xi=k) = q^{k-1}p, k= 1,2,...
\]</span></p>
<h1 id="几何分布的无记忆性">几何分布的无记忆性</h1>
<p>在伯努利实验中，等待首次成功的时间<span class="math inline">\(\xi\)</span>服从几何分布。假定前m次都没有成功， 那么首次成功等待的时间为<span class="math inline">\(\xi^{&#39;}\)</span>,也是服从几何分布的。 证明： 根据条件概率的定义 <span class="math display">\[
P = \frac{q^{m+k+1}p}{q^m} = q^{k-1}p
\]</span></p>
]]></content>
      <tags>
        <tag>geometrix distribution</tag>
      </tags>
  </entry>
  <entry>
    <title>分位数标准化</title>
    <url>/2021/02/05/%E5%88%86%E4%BD%8D%E6%95%B0%E6%A0%87%E5%87%86%E5%8C%96/</url>
    <content><![CDATA[<h1 id="分位数标准化-quantile-normalization">分位数标准化 Quantile normalization</h1>
<p>分位数标准化就是使得两个分布在统计属性上相同的技术手法。 该方法在基因芯片中经常使用。</p>
<h1 id="例子">例子</h1>
<p>如图我们有三个基因芯片的数据，假设有A,B,C,D四个基因</p>
<p>表格Table1</p>
<table>
<thead>
<tr class="header">
<th>Gene</th>
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>5</td>
<td>4</td>
<td>3</td>
</tr>
<tr class="even">
<td>B</td>
<td>2</td>
<td>1</td>
<td>4</td>
</tr>
<tr class="odd">
<td>C</td>
<td>3</td>
<td>4</td>
<td>6</td>
</tr>
<tr class="even">
<td>D</td>
<td>4</td>
<td>2</td>
<td>8</td>
</tr>
</tbody>
</table>
<p>对每一列进行排序，按照从小到大的顺序。 表格Table2</p>
<table>
<thead>
<tr class="header">
<th>Gene</th>
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>iv</td>
<td>iii</td>
<td>i</td>
</tr>
<tr class="even">
<td>B</td>
<td>i</td>
<td>i</td>
<td>ii</td>
</tr>
<tr class="odd">
<td>C</td>
<td>ii</td>
<td>iii</td>
<td>iii</td>
</tr>
<tr class="even">
<td>D</td>
<td>iii</td>
<td>ii</td>
<td>iv</td>
</tr>
</tbody>
</table>
<p>这个排序好的列表(Table2)后续会用到。回到第一个数据表(Table1)，重排每一列的数据，根据从小到大的顺序依次排列。 第一列原始的数据是5,2,3,4 ---&gt; 2,3,4,5 第二列原始的数据是4,1,4,2 ---&gt; 1,2,4,4 第三列原始的数据是3,4,6,8 ---&gt; 3,4,6,8(原始已经是从小大，不变)</p>
<p>表格Table3</p>
<table>
<thead>
<tr class="header">
<th>Gene</th>
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>2</td>
<td>1</td>
<td>3</td>
</tr>
<tr class="even">
<td>B</td>
<td>3</td>
<td>2</td>
<td>4</td>
</tr>
<tr class="odd">
<td>C</td>
<td>4</td>
<td>4</td>
<td>6</td>
</tr>
<tr class="even">
<td>D</td>
<td>5</td>
<td>4</td>
<td>8</td>
</tr>
</tbody>
</table>
<p>计算Table3每一行的均值，找到新的排序, A (2+1+3)/3 = 2.00 = rank i</p>
<p>B (3+2+4)/3 = 3.00 = rank ii</p>
<p>C (4+4+6)/3 = 4.67 = rank iii</p>
<p>D (5+4+8)/3 = 5.67 = rank iv</p>
<p>根据原始数据的排序Table2，和上面新排序对应的值， 将原始值根据对应的排序进行值的替换。</p>
<p>第一次标准化 表格Table4</p>
<table>
<thead>
<tr class="header">
<th>Gene</th>
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>5.67</td>
<td>4.67</td>
<td>2.00</td>
</tr>
<tr class="even">
<td>B</td>
<td>2.00</td>
<td>2.00</td>
<td>3.00</td>
</tr>
<tr class="odd">
<td>C</td>
<td>3.00</td>
<td>4.67</td>
<td>4.67</td>
</tr>
<tr class="even">
<td>D</td>
<td>4.67</td>
<td>3.00</td>
<td>5.67</td>
</tr>
</tbody>
</table>
<p>注意，在第二列中有并列的值，这些并列的值应该被平均值替换，于是在这里我们替换第二列中并列的值， 使用4.67和5.67的(4.67+5.67)/2=5.17平均值来替换。</p>
<p>第二次标准化 表格Table5</p>
<table>
<thead>
<tr class="header">
<th>Gene</th>
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>A</td>
<td>5.67</td>
<td>5.17</td>
<td>2.00</td>
</tr>
<tr class="even">
<td>B</td>
<td>2.00</td>
<td>2.00</td>
<td>3.00</td>
</tr>
<tr class="odd">
<td>C</td>
<td>3.00</td>
<td>5.17</td>
<td>4.67</td>
</tr>
<tr class="even">
<td>D</td>
<td>4.67</td>
<td>3.00</td>
<td>5.67</td>
</tr>
</tbody>
</table>
<p>新的值符合相同的分布，我们现在来看看一些统计量，发现这些值比较相近。</p>
<table>
<thead>
<tr class="header">
<th>Sample1</th>
<th>Sample2</th>
<th>Sample3</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Min. :2.000</td>
<td>Min. :2.000</td>
<td>Min. :2.000</td>
</tr>
<tr class="even">
<td>1st Qu.:2.750</td>
<td>1st Qu.:2.750</td>
<td>1st Qu.:2.750</td>
</tr>
<tr class="odd">
<td>Median :3.833</td>
<td>Median :4.083</td>
<td>Median :3.833</td>
</tr>
<tr class="even">
<td>Mean :3.833</td>
<td>Mean :3.833</td>
<td>Mean :3.833</td>
</tr>
<tr class="odd">
<td>3rd Qu.:4.917</td>
<td>3rd Qu.:5.167</td>
<td>3rd Qu.:4.917</td>
</tr>
<tr class="even">
<td>Max. :5.667</td>
<td>Max. :5.167</td>
<td>Max. :5.667</td>
</tr>
</tbody>
</table>
<h1 id="python实现quantile-normalize">python实现quantile normalize</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quantileNormalize</span>(<span class="params">df_input</span>):</span></span><br><span class="line">    df = df_input.copy()</span><br><span class="line">    <span class="comment">#compute rank</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df:</span><br><span class="line">        dic.update(&#123;col : <span class="built_in">sorted</span>(df[col])&#125;)</span><br><span class="line">    sorted_df = pd.DataFrame(dic)</span><br><span class="line">    rank = sorted_df.mean(axis = <span class="number">1</span>).tolist()</span><br><span class="line">    <span class="comment">#sort</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> df:</span><br><span class="line">        t = np.searchsorted(np.sort(df[col]), df[col])</span><br><span class="line">        df[col] = [rank[i] <span class="keyword">for</span> i <span class="keyword">in</span> t]</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>统计学</tag>
        <tag>标准化</tag>
      </tags>
  </entry>
  <entry>
    <title>样本的经验分布函数和样本矩</title>
    <url>/2021/02/18/%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0%E5%92%8C%E6%A0%B7%E6%9C%AC%E7%9F%A9/</url>
    <content><![CDATA[<h1 id="分布函数">分布函数</h1>
<p>设总体X的分布函数是<span class="math inline">\(F(x)\)</span>,从中获得的样本观察值为<span class="math inline">\(x_1,x_2,...x_n\)</span>。 将他们从小到大重新排序，重新编号为<span class="math inline">\(x_(1)\)</span>.</p>
<h1 id="矩moment">矩（moment）</h1>
<h2 id="原点矩">原点矩</h2>
<p>一阶原点矩$ E(x) $ 二阶原点矩$ E(x^2)$ k阶原点矩 $ E(x^k)$</p>
<h2 id="中心矩">中心矩</h2>
<p>二阶中心距 <span class="math inline">\(E((X-E(X))^2)\)</span></p>
]]></content>
      <tags>
        <tag>经验分布函数</tag>
        <tag>样本矩</tag>
      </tags>
  </entry>
  <entry>
    <title>巴斯卡分布</title>
    <url>/2021/03/12/%E5%B7%B4%E6%96%AF%E5%8D%A1%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<h1 id="巴斯卡分布">巴斯卡分布</h1>
<p>伯努利事件中，记<span class="math inline">\(\xi\)</span>为第r次成功出现的实验次数，则<span class="math inline">\(\xi\)</span>是随机变量， 取值为r,r+1,r+2,...,其概率分布为巴斯卡分布 <span class="math display">\[
P(\xi=k) = {k-1 \choose (r-1)}p^rq^{k-r}, k=r,r+1,r+2,...
\]</span> 显然，单r=1时，即为几何分布</p>
<h1 id="负二项分布">负二项分布</h1>
<p>巴斯卡分布规定事件发生的次数为正整数r&gt;=0，当除掉这个限制后，巴斯卡分布就拓展为负二项分布。 现在规定，伯努利事件发生的概率为p，伯努利试验发生的总次数为r+k,事件刚好在r+k次发生第r次的 概率为<span class="math inline">\(f(k;r;p)\)</span></p>
<p><span class="math display">\[
f(k;r;p) = {k+r-1 \choose (r-1)}\cdot p^r \cdot (1-p)^k
\]</span></p>
]]></content>
      <tags>
        <tag>巴斯卡分布</tag>
      </tags>
  </entry>
  <entry>
    <title>github.io 博客搭建指南</title>
    <url>/2021/01/15/%E6%90%AD%E5%BB%BAgithub.io%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。</p>
<h1 id="搭建步骤">搭建步骤</h1>
<ol type="1">
<li>获取域名</li>
<li>建立github仓库</li>
<li>安装git</li>
<li>安装Node.js</li>
<li>安装Hexo</li>
<li>推送网站</li>
<li>绑定域名</li>
<li>更换主题</li>
</ol>
<p><span class="math display">\[E[X]=x^4\]</span></p>
]]></content>
  </entry>
  <entry>
    <title>期望和方差的性质及证明</title>
    <url>/2021/02/02/%E6%9C%9F%E6%9C%9B%E5%92%8C%E6%96%B9%E5%B7%AE%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E8%AF%81%E6%98%8E/</url>
    <content><![CDATA[<h3 id="期望数学定义及性质证明">1.期望数学定义及性质证明</h3>
<p>在n次独立重复的试验中观察随机变量<span class="math inline">\(\xi\)</span>的取值，则取<span class="math inline">\(x_i\)</span>的值大致 应该出现在<span class="math inline">\(np_i\)</span>次，根据n次试验结果计算该随机变量的平均值大致如下： <span class="math display">\[
\frac{1}{n}[np_1x_1+np_2x_2+...+np_kx_k] = \sum_{i=1}^{k}p_ix_i
\]</span> 定义：实数<span class="math inline">\(E\xi = \sum_{i=1}^{k}x_iP(A_i)\)</span>,称作随机变量<span class="math inline">\(\xi=\sum_{i=1}^{k}x_iI(A_i)\)</span> 的数学期望或平均值。 数学期望的基本性质</p>
<ol type="1">
<li>若<span class="math inline">\(\xi \ge 0\)</span>,则<span class="math inline">\(E\xi \ge 0\)</span>.</li>
<li><span class="math inline">\(E(a\xi+b\eta) = aE\xi + bE\eta\)</span>,其中a,b为常数.</li>
<li>若<span class="math inline">\(\xi \ge \eta\)</span>,则<span class="math inline">\(E\xi \ge E\eta\)</span>.</li>
<li><span class="math inline">\(|E\xi| \le E|\xi|\)</span>.</li>
<li>若<span class="math inline">\(\xi\)</span>和<span class="math inline">\(\eta\)</span>独立,则<span class="math inline">\(E\xi\eta=E\xi \cdot E\eta\)</span>.</li>
<li><span class="math inline">\((E|\xi|)^2 \le E{\xi}^2 \cdot E{\eta}^2\)</span>,柯西-瓦尔茨不等式.</li>
<li>若<span class="math inline">\(\xi = I(A)\)</span>,则<span class="math inline">\(E\xi = P(A)\)</span>.</li>
</ol>
<p>证明： 性质1显然成立 性质7，根据示性函数，由于 <span class="math display">\[
\xi = I_A(\omega)= \begin{cases}
1,  \omega \in A, \\
0,  \omega \in A.
\end{cases}
\]</span> 由于伯努利试验只有0，1，所以根据随机变量期望的定义，性质7成立。</p>
<p>性质2的证明： 设 <span class="math inline">\(\xi=\sum x_iI(A_i), \eta=\sum y_jI(B_j)\)</span>,</p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
a\xi+b\eta &amp;= a\sum_{i,j}x_i I(A_i \cap B_j) + b\sum_{i,j} y_j I(A_i \cap B_j) \\ 
&amp;=\sum_{i,j}(a x_i+b y_j)I(A_i \cap B_j) \\
\end{aligned}
\end{equation}\]</span></p>
<p><span class="math display">\[\begin{equation}
\begin{aligned}
E(a\xi+b\eta) &amp;= \sum_{i,j}(a x_i+b y_i)P(A_i \cap B_j) \\ 
&amp;=\sum_{i}a x_iP(A_i) + \sum_{j}b y_jP(B_j) \\ 
&amp;=a\sum_{i}x_iP(A_i) + b\sum_{j}y_jP(B_j) \\ 
&amp;=a\sum(\xi) + b\sum(\eta) \\
\end{aligned}
\end{equation}\]</span></p>
<p>性质3 的证明： 由性质1，2可以证明3。</p>
<p>性质4的证明： <span class="math display">\[
|E\xi| = |\sum_{i}x_iP(A_i)| \le \sum_{i}|x_i|P(B_j)=E|\xi|
\]</span></p>
<p>性质5的证明： <span class="math display">\[\begin{equation}
\begin{aligned}
E\xi\eta &amp;= E(\sum_{i}x_i I(A_i))(\sum_{j}y_j I(B_j)) \\
&amp;=E\sum_{i,j}x_iy_jI(A_i \cap B_j) \\ 
&amp;=\sum_{i,j}x_i y_jP(A_i \cap B_j) \\
&amp;=\sum x_j y_jP(A_i)P(B_j) \\
&amp;=(\sum_{i}x_i P(A_i))(\sum_{j}y_i P(B_j)) \\
&amp;=E\xi \cdot E\eta \\
\end{aligned}
\end{equation}\]</span> 证明过程中，对于独立的随机变量<span class="math inline">\(\xi\)</span> ,<span class="math inline">\(\eta\)</span>， 事件 <span class="math inline">\(A_i = {\omega:\xi(\omega)=x_i}\)</span> 和 <span class="math inline">\(B_j={\omega:\eta(\omega)=y_j}\)</span> 事件独立：<span class="math inline">\(P(A_i \cap B_j) = P(A_i)P(B_j)\)</span></p>
<p>性质6 的证明： 已知 <span class="math display">\[ \xi^2 = \sum_{i=1}^{l}x_i^2 I(A_i), \eta^2 = \sum y_i^2 I(b_j)\]</span> <span class="math display">\[ E\xi^2 = \sum_{i=1}^l x_i^2 P(A_i), E\eta^2 = \sum_{j=1}^k y_i^2P(B_j) \]</span></p>
<p>设 <span class="math inline">\(E\xi^2 &gt; 0\)</span> ;<span class="math inline">\(E\eta^2 &gt; 0\)</span>, 记 <span class="math inline">\(\widetilde{\xi} = \frac{\xi}{\sqrt{E\xi^2}}\)</span> ,<span class="math inline">\(\widetilde{\eta} = \frac{\eta}{\sqrt{E\eta^2}}\)</span></p>
<p>由于 <span class="math inline">\(2|\widetilde{\xi} \widetilde{\eta}| \le {\widetilde{\xi}}^2 + {\widetilde{\eta}}^2\)</span> 可得 <span class="math inline">\(2E|\widetilde{\xi} \widetilde{\eta}| \le E{\widetilde{\xi}}^2 + E {\widetilde{\eta}}^2 = 1+1=2\)</span> 所以 <span class="math inline">\(E|\widetilde{\xi} \widetilde{\eta}| \le 1\)</span> <span class="math display">\[\begin{equation}
\begin{aligned}
(E|\xi\eta|)^2 = (E|\widetilde{\xi}\sqrt{E\xi^2} \widetilde{\eta}\sqrt{E\eta^2}|)^2 \\ 
&amp;=(E|\sqrt{E\xi^2E\eta^2}\widetilde{\xi}\widetilde{\eta}|)^2 \\ 
&amp;=E\xi^2 E\eta^2(E|\widetilde{\xi}\widetilde{\eta}|)^2 \\ 
\end{aligned}
\end{equation}\]</span> 由于 <span class="math inline">\(E|\widetilde{\xi} \widetilde{\eta}| \le 1\)</span> 所以 <span class="math inline">\((E|\widetilde{\xi} \widetilde{\eta}|)^2 \le 1\)</span> 因此 <span class="math inline">\((E|\xi\eta|)^2 = E\xi^2 E\eta^2(E|\widetilde{\xi}\widetilde{\eta}|)^2 \le E\xi^2 \times E\eta^2\)</span> 所以性质6 得证。</p>
<p>因为设 <span class="math inline">\(E\xi &gt; 0\)</span>,所以还有一种特殊情况要证明。 假设 <span class="math inline">\(E\xi^2 = 0\)</span> , <span class="math inline">\(\sum_{i}x_i^2P(A_i) = 0\)</span> 因此0是<span class="math inline">\(\xi\)</span>的可能的值，且 <span class="math inline">\(P{\omega : \xi(\omega) = 0} = 1\)</span> 因为<span class="math inline">\(E\xi^2\)</span> 或者 <span class="math inline">\(E\eta^2=0\)</span> ,显然 <span class="math inline">\(E|\xi\eta| = 0\)</span> ,性质6依然成立。</p>
<h3 id="方差的定义及性质证明">2.方差的定义及性质证明</h3>
<p>方差是来描述数据分散程度的指标</p>
<p><span class="math display">\[D\xi = E(\xi - E\xi)^2\]</span> <span class="math inline">\(D\xi\)</span>记为方差，<span class="math inline">\(\sigma = \sqrt{D\xi}\)</span>记为标准差。</p>
<p>性质1 由于 <span class="math display">\[
E(\xi-E\xi)^2 = E[\xi^2 - 2\xi E\xi + (E\xi)^2] = E(\xi^2) - (E\xi)^2
\]</span> 所以 <span class="math display">\[D\xi = E\xi^2 - (E\xi)^2\]</span></p>
<p>根据方差的定义，可知<span class="math inline">\(D\xi\ge0\)</span></p>
<p>性质2 对于任意常数的a,b <span class="math inline">\(D(a+b\xi) = b^2D\xi\)</span> 当<span class="math inline">\(Da=0\)</span>,<span class="math inline">\(D(b\xi) = b^2D\xi\)</span></p>
<p>性质3 对于二个随机变量<span class="math inline">\(\xi\)</span>,<span class="math inline">\(\eta\)</span></p>
<p><span class="math display">\[D(\xi+\eta) = E[(\xi-E\xi)+(\eta - E\eta)]^2 = D\xi + D\eta +2E(\xi-E\xi)(\eta-E\eta)\]</span></p>
<p>记： <span class="math display">\[
cov(\xi,\eta) = E(\xi-E\xi)(\eta-E\eta)
\]</span> 称作随机变量<span class="math inline">\(\xi\)</span>和<span class="math inline">\(\eta\)</span>的协方差，如果<span class="math inline">\(D\xi \ge 0\)</span>, <span class="math inline">\(D\eta \ge 0\)</span>, 则 <span class="math inline">\(\rho(\xi,\eta) = \frac{cov(\xi,\eta)}{\sqrt{D\xi \times D\eta}}\)</span> 称作随机变量<span class="math inline">\(\xi\)</span>和<span class="math inline">\(\eta\)</span>的相关系数。</p>
]]></content>
      <tags>
        <tag>expeactation</tag>
        <tag>variance</tag>
      </tags>
  </entry>
  <entry>
    <title>统计学中的均值比较</title>
    <url>/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h2 id="均值比较-compare-means">均值比较 （compare means）</h2>
<p>在统计学中，我们常常需要比较两组或者多组之间的均值是否存在差异，计算差异的显著性， 同时也要用图形的方式呈现。这里推荐一个比较实用的R包，ggpubr (publication ready plot in ggplot2)。 ggpubr作图上与ggplot2无缝对接，同时也可以添加显著性的P值，对文章发表非常实用。</p>
<h2 id="ggpubr">ggpubr</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Instrall from CRAN</span></span><br><span class="line">install.packages(<span class="string">&quot;ggpubr&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or from github </span></span><br><span class="line"><span class="keyword">if</span>(!require(devtools)) install.packages(<span class="string">&quot;devtools&quot;</span>)</span><br><span class="line">devtools::install_github(<span class="string">&quot;kassambara/ggpubr&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="均值比较的方法">均值比较的方法</h2>
<ol type="1">
<li>t检验 T-test (需要假设数据分布为正态分布，有参检验）</li>
<li>Wilcoxon test (无参检验）</li>
<li>ANOVA test (需要假设数据分布为正态分布，有参检验）</li>
<li>Kruskal-Wallis test （无参检验）</li>
</ol>
<h2 id="作图数据集">作图数据集</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">&gt; data(<span class="string">&quot;ToothGrowth&quot;</span>)</span><br><span class="line">&gt; head(ToothGrowth)</span><br><span class="line">   len supp dose</span><br><span class="line">1  <span class="number">4.2</span>   VC  <span class="number">0.5</span></span><br><span class="line">2 <span class="number">11.5</span>   VC  <span class="number">0.5</span></span><br><span class="line">3  <span class="number">7.3</span>   VC  <span class="number">0.5</span></span><br><span class="line">4  <span class="number">5.8</span>   VC  <span class="number">0.5</span></span><br><span class="line">5  <span class="number">6.4</span>   VC  <span class="number">0.5</span></span><br><span class="line">6 <span class="number">10.0</span>   VC  <span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<h2 id="比较两个独立的样本">比较两个独立的样本</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggboxplot(ToothGrowth, x = <span class="string">&quot;supp&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>,</span><br><span class="line">          add = <span class="string">&quot;jitter&quot;</span>)</span><br><span class="line"><span class="comment">#  Add p-value</span></span><br><span class="line">p + stat_compare_means()</span><br><span class="line"><span class="comment"># Change method</span></span><br><span class="line">p + stat_compare_means(method = <span class="string">&quot;t.test&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/wilcoxon.png" alt="&#39;wilcoxon&#39;"><img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/ttest.png" alt="&#39;ttest&#39;"></p>
<h2 id="成对样本的比较">成对样本的比较</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggpaired(ToothGrowth, x = <span class="string">&quot;supp&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">         color = <span class="string">&quot;supp&quot;</span>, line.color = <span class="string">&quot;gray&quot;</span>, line.size = <span class="number">0.4</span>,</span><br><span class="line">         palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means(paired = <span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/Paired.png"></p>
<h2 id="多组样本之间的比较2">多组样本之间的比较（&gt;=2）</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Default method = &quot;kruskal.test&quot; for multiple groups</span></span><br><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means()</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/kruskal.png" alt="&#39;kruskal&#39;"><figcaption>'kruskal'</figcaption>
</figure>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Change method to anova</span></span><br><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means(method = <span class="string">&quot;anova&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/anova.png" alt="&#39;anova&#39;"><figcaption>'anova'</figcaption>
</figure>
<ul>
<li><p>指定比较组合 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">my_comparisons &lt;- <span class="built_in">list</span>( <span class="built_in">c</span>(<span class="string">&quot;0.5&quot;</span>, <span class="string">&quot;1&quot;</span>), <span class="built_in">c</span>(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>), <span class="built_in">c</span>(<span class="string">&quot;0.5&quot;</span>, <span class="string">&quot;2&quot;</span>) )</span><br><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+ </span><br><span class="line">  stat_compare_means(comparisons = my_comparisons)+ <span class="comment"># Add pairwise comparisons p-value</span></span><br><span class="line">  stat_compare_means(label.y = <span class="number">50</span>)     <span class="comment"># Add global p-value</span></span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/compare.png" alt="&#39;compare&#39;"></p></li>
<li><p>指定bar的位置 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+ </span><br><span class="line">  stat_compare_means(comparisons = my_comparisons, label.y = <span class="built_in">c</span>(<span class="number">29</span>, <span class="number">35</span>, <span class="number">40</span>))+</span><br><span class="line">  stat_compare_means(label.y = <span class="number">45</span>)</span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/bar.png" alt="&#39;ybar&#39;"></p></li>
<li><p>指定一个参考，进行多重比较 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means(method = <span class="string">&quot;anova&quot;</span>, label.y = <span class="number">40</span>)+      <span class="comment"># Add global p-value</span></span><br><span class="line">  stat_compare_means(label = <span class="string">&quot;p.signif&quot;</span>, method = <span class="string">&quot;t.test&quot;</span>,</span><br><span class="line">                     ref.group = <span class="string">&quot;0.5&quot;</span>)                    <span class="comment"># Pairwise comparison against reference</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/refer.png" alt="&#39;refer&#39;"></p></li>
<li><p>对于全局（base-mean），进行多重比较</p></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;dose&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means(method = <span class="string">&quot;anova&quot;</span>, label.y = <span class="number">40</span>)+      <span class="comment"># Add global p-value</span></span><br><span class="line">  stat_compare_means(label = <span class="string">&quot;p.signif&quot;</span>, method = <span class="string">&quot;t.test&quot;</span>,</span><br><span class="line">                     ref.group = <span class="string">&quot;.all.&quot;</span>) </span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/all.png" alt="&#39;all&#39;"><figcaption>'all'</figcaption>
</figure>
<p>一个真实的例子 DEPDC1 在proliferation组中显著上调，在Hyperdiploid 和 Low bone disease中显著下调。 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load myeloma data from GitHub</span></span><br><span class="line">myeloma &lt;- read.delim(<span class="string">&quot;https://raw.githubusercontent.com/kassambara/data/master/myeloma.txt&quot;</span>)</span><br><span class="line"><span class="comment"># Perform the test</span></span><br><span class="line">compare_means(DEPDC1 ~ molecular_group,  data = myeloma,</span><br><span class="line">              ref.group = <span class="string">&quot;.all.&quot;</span>, method = <span class="string">&quot;t.test&quot;</span>)</span><br><span class="line"></span><br><span class="line">ggboxplot(myeloma, x = <span class="string">&quot;molecular_group&quot;</span>, y = <span class="string">&quot;DEPDC1&quot;</span>, color = <span class="string">&quot;molecular_group&quot;</span>, </span><br><span class="line">          add = <span class="string">&quot;jitter&quot;</span>, legend = <span class="string">&quot;none&quot;</span>) +</span><br><span class="line">  rotate_x_text(angle = <span class="number">45</span>)+</span><br><span class="line">  geom_hline(yintercept = mean(myeloma$DEPDC1), linetype = <span class="number">2</span>)+ <span class="comment"># Add horizontal line at base mean</span></span><br><span class="line">  stat_compare_means(method = <span class="string">&quot;anova&quot;</span>, label.y = <span class="number">1600</span>)+        <span class="comment"># Add global annova p-value</span></span><br><span class="line">  stat_compare_means(label = <span class="string">&quot;p.signif&quot;</span>, method = <span class="string">&quot;t.test&quot;</span>,</span><br><span class="line">                     ref.group = <span class="string">&quot;.all.&quot;</span>)                      <span class="comment"># Pairwise comparison against all</span></span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/example.png" alt="&#39;example&#39;"></p>
<p>指定参数 hide.ns = TRUE, 隐藏ns。 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggboxplot(myeloma, x = <span class="string">&quot;molecular_group&quot;</span>, y = <span class="string">&quot;DEPDC1&quot;</span>, color = <span class="string">&quot;molecular_group&quot;</span>, </span><br><span class="line">          add = <span class="string">&quot;jitter&quot;</span>, legend = <span class="string">&quot;none&quot;</span>) +</span><br><span class="line">  rotate_x_text(angle = <span class="number">45</span>)+</span><br><span class="line">  geom_hline(yintercept = mean(myeloma$DEPDC1), linetype = <span class="number">2</span>)+ <span class="comment"># Add horizontal line at base mean</span></span><br><span class="line">  stat_compare_means(method = <span class="string">&quot;anova&quot;</span>, label.y = <span class="number">1600</span>)+        <span class="comment"># Add global annova p-value</span></span><br><span class="line">  stat_compare_means(label = <span class="string">&quot;p.signif&quot;</span>, method = <span class="string">&quot;t.test&quot;</span>,</span><br><span class="line">                     ref.group = <span class="string">&quot;.all.&quot;</span>, hide.ns = <span class="literal">TRUE</span>)      <span class="comment"># Pairwise comparison against all</span></span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/example2.png" alt="&#39;example2&#39;"></p>
<h2 id="分页">分页</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">compare_means(len ~ supp, data = ToothGrowth, </span><br><span class="line">              group.by = <span class="string">&quot;dose&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Box plot facetted by &quot;dose&quot;</span></span><br><span class="line">p &lt;- ggboxplot(ToothGrowth, x = <span class="string">&quot;supp&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>,</span><br><span class="line">          add = <span class="string">&quot;jitter&quot;</span>,</span><br><span class="line">          facet.by = <span class="string">&quot;dose&quot;</span>, short.panel.labs = <span class="literal">FALSE</span>)</span><br><span class="line"><span class="comment"># Use only p.format as label. Remove method name.</span></span><br><span class="line">p + stat_compare_means(label = <span class="string">&quot;p.format&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/facet.png" alt="&#39;facet&#39;"><figcaption>'facet'</figcaption>
</figure>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p + stat_compare_means(label =  <span class="string">&quot;p.signif&quot;</span>, label.x = <span class="number">1.5</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/facet2.png" alt="&#39;facet2&#39;"><figcaption>'facet2'</figcaption>
</figure>
<ul>
<li>成对组合在一张图中 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p &lt;- ggboxplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">               color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>,</span><br><span class="line">               add = <span class="string">&quot;jitter&quot;</span>)</span><br><span class="line">p + stat_compare_means(aes(group = supp))</span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/single_panel.png" alt="&#39;single_panel&#39;"></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">p + stat_compare_means(aes(group = supp), label = <span class="string">&quot;p.format&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure>
<img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/single_panel2.png" alt="&#39;single_panel2&#39;"><figcaption>'single_panel2'</figcaption>
</figure>
<ul>
<li>在分组后，成对比较 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Box plot facetted by &quot;dose&quot;</span></span><br><span class="line">p &lt;- ggpaired(ToothGrowth, x = <span class="string">&quot;supp&quot;</span>, y = <span class="string">&quot;len&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>, </span><br><span class="line">          line.color = <span class="string">&quot;gray&quot;</span>, line.size = <span class="number">0.4</span>,</span><br><span class="line">          facet.by = <span class="string">&quot;dose&quot;</span>, short.panel.labs = <span class="literal">FALSE</span>)</span><br><span class="line"><span class="comment"># Use only p.format as label. Remove method name.</span></span><br><span class="line">p + stat_compare_means(label = <span class="string">&quot;p.format&quot;</span>, paired = <span class="literal">TRUE</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/paired_group.png" alt="&#39;paired_group&#39;"></li>
</ul>
<h2 id="其他图形">其他图形</h2>
<h3 id="柱形图和线图">柱形图和线图</h3>
<ul>
<li><p>一个变量 <figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggbarplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>, add = <span class="string">&quot;mean_se&quot;</span>)+</span><br><span class="line">  stat_compare_means() +                                         <span class="comment"># Global p-value</span></span><br><span class="line">  stat_compare_means(ref.group = <span class="string">&quot;0.5&quot;</span>, label = <span class="string">&quot;p.signif&quot;</span>,</span><br><span class="line">                     label.y = <span class="built_in">c</span>(<span class="number">22</span>, <span class="number">29</span>))                   <span class="comment"># compare to ref.group</span></span><br><span class="line"><span class="comment"># Line plot of mean +/-se</span></span><br><span class="line">ggline(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>, add = <span class="string">&quot;mean_se&quot;</span>)+</span><br><span class="line">  stat_compare_means() +                                         <span class="comment"># Global p-value</span></span><br><span class="line">  stat_compare_means(ref.group = <span class="string">&quot;0.5&quot;</span>, label = <span class="string">&quot;p.signif&quot;</span>,</span><br><span class="line">                     label.y = <span class="built_in">c</span>(<span class="number">22</span>, <span class="number">29</span>)) </span><br></pre></td></tr></table></figure> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/other_bar.png" alt="&#39;other_bar&#39;"> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/other_line.png" alt="&#39;other_line&#39;"></p></li>
<li><p>两个变量</p></li>
</ul>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">ggbarplot(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>, add = <span class="string">&quot;mean_se&quot;</span>,</span><br><span class="line">          color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>, </span><br><span class="line">          position = position_dodge(<span class="number">0.8</span>))+</span><br><span class="line">  stat_compare_means(aes(group = supp), label = <span class="string">&quot;p.signif&quot;</span>, label.y = <span class="number">29</span>)</span><br><span class="line">ggline(ToothGrowth, x = <span class="string">&quot;dose&quot;</span>, y = <span class="string">&quot;len&quot;</span>, add = <span class="string">&quot;mean_se&quot;</span>,</span><br><span class="line">       color = <span class="string">&quot;supp&quot;</span>, palette = <span class="string">&quot;jco&quot;</span>)+</span><br><span class="line">  stat_compare_means(aes(group = supp), label = <span class="string">&quot;p.signif&quot;</span>, </span><br><span class="line">                     label.y = <span class="built_in">c</span>(<span class="number">16</span>, <span class="number">25</span>, <span class="number">29</span>))</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/other_bar2.png" alt="&#39;other_bar2&#39;"> <img src="/2022/03/11/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E5%9D%87%E5%80%BC%E6%AF%94%E8%BE%83/other_line2.png" alt="&#39;other_line2&#39;"></p>
]]></content>
  </entry>
  <entry>
    <title>统计学中的正态性检验</title>
    <url>/2022/03/22/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B8%AD%E7%9A%84%E6%AD%A3%E6%80%81%E6%80%A7%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="统计学检验的前提条件">统计学检验的前提条件</h2>
<p>大多数统计学检验（相关性，回归，t-test, ANOVA）都需要数据符合正态分布，这些检验也叫参数检验，因为它们依赖数据分布。 在进行参数检验之前，我们要保证这些数据分布的假设能满足；不能满足的话，就进行非参检验。</p>
<h2 id="预安装的r包">预安装的R包</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dplyr</span></span><br><span class="line">install.packages(<span class="string">&#x27;dplyr&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ggpubr</span></span><br><span class="line"><span class="keyword">if</span>(!require(devtools)) install.packages(<span class="string">&quot;devtools&quot;</span>)</span><br><span class="line">devtools::install_github(<span class="string">&quot;kassambara/ggpubr&quot;</span>)</span><br><span class="line"></span><br><span class="line">install.packages(<span class="string">&quot;ggpubr&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="密度图和qq图可视化查看是否满足正态分布">密度图和QQ图，可视化查看是否满足正态分布</h2>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(<span class="string">&quot;dplyr&quot;</span>)</span><br><span class="line">library(<span class="string">&quot;ggpubr&quot;</span>)</span><br><span class="line"></span><br><span class="line">set.seed(<span class="number">1234</span>)</span><br><span class="line">dplyr::sample_n(ToothGrowth, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">library(<span class="string">&quot;ggpubr&quot;</span>)</span><br><span class="line">ggdensity(ToothGrowth$len, </span><br><span class="line">          main = <span class="string">&quot;Density plot of tooth length&quot;</span>,</span><br><span class="line">          xlab = <span class="string">&quot;Tooth length&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">library(ggpubr)</span><br><span class="line">ggqqplot(ToothGrowth$len)</span><br></pre></td></tr></table></figure>
<h2 id="正态性检验">正态性检验</h2>
<p>前面可视化的查看是否符合正态分布通常是不可靠的，需要我们进行显著性检验，比较我们的数据分布和正太数据分布的差异。 有两种正态性检验方法：Kolmogorov-Smirnov(K-S)检验和Shapiro-Wilk's 检验。 零假设是：样本的数据分布是正态分布， 检验如果显著，则数据是非正态分布。 注意：正态性检验对样本数量是非常敏感的，小样本数目容易通过正态检验，因此要结合数据的可视化和检验来确定数据的分布。</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">shapiro.test(ToothGrowth$len)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>统计量和样本方差</title>
    <url>/2021/02/16/%E7%BB%9F%E8%AE%A1%E9%87%8F%E5%92%8C%E6%A0%B7%E6%9C%AC%E6%96%B9%E5%B7%AE/</url>
    <content><![CDATA[<h1 id="统计量">统计量</h1>
<p>不含有任何位置参数的样本函数称为统计量。</p>
<p>例如，数据的算数平均数称为样本均值。</p>
<p><span class="math inline">\(\overline x = \frac{1}{n} \sum_{i=1}^{n}x_i\)</span></p>
<h1 id="估计量">估计量</h1>
<p>用于估计未知参数的统计量称为点估计量。 参数<span class="math inline">\(\theta\)</span>的估计量常用<span class="math inline">\(\hat \theta=\hat \theta(x_1,x_2,...x_n)\)</span>,表示，参数的可能取值范围是参数空间，记为<span class="math inline">\(\Theta = (\theta)\)</span>。</p>
<p>这里的参数常常只如下几种： * 分布中所含有的位置参数； * 分布中的期望，方差，标准差，分位数，和特征值； * 某事件的概率； 一个参数的估计量通常不止一个，如何判断优劣？常用的标准有多个。如无偏性，有效性，均方误差最小，相合性等等。</p>
<p>设<span class="math inline">\(\hat \theta =\hat \theta(x_1,x_2,...x_n)\)</span>是参数<span class="math inline">\(\theta\)</span>的一个估计，对于参数空间<span class="math inline">\(\Theta=\theta\)</span>中任意一个<span class="math inline">\(\theta\)</span> 都有 <span class="math display">\[
E(\hat \theta) = \theta, \forall \theta \in \Theta
\]</span> 则称<span class="math inline">\(\hat \theta\)</span>为<span class="math inline">\(\theta\)</span>的无偏估计，否则称为<span class="math inline">\(\theta\)</span>有偏估计。</p>
<h1 id="样本方差">样本方差</h1>
<p>统计学中常用的三个统计量是：</p>
<ul>
<li>样本均值：<span class="math inline">\(\overline x = \frac{1}{n} \sum_{i=1}^{n}x_i\)</span></li>
<li>样本方差：<span class="math inline">\(s^2 = \frac{1}{n-1} \sum_{i=1}^{n}(x_i-\overline x)\)</span></li>
<li>样本标准差：<span class="math inline">\(s = \sqrt{s^2}\)</span></li>
</ul>
<ol type="1">
<li>样本均值<span class="math inline">\(\overline x\)</span>总位于数据中部，他是总体均值<span class="math inline">\(\mu\)</span>的无偏估计，即<span class="math inline">\(E(\overline x) = \mu\)</span></li>
<li><span class="math inline">\(x_i\)</span>对<span class="math inline">\(\overline x\)</span>的偏差<span class="math inline">\(x_i-\overline x\)</span>可正可负，其和恒为零，<span class="math inline">\(\sum_{i=1}^{n}(x_i-\overline x) = 0\)</span> 这个等式表明: n个偏差中只有n-1个是独立的，第n个可以根据其和为0的公式计算得出。 在统计中独立偏差的个数称为自由度，记为<span class="math inline">\(f\)</span>，故n个偏差有n-1个自由度，即<span class="math inline">\(f= n-1\)</span>。</li>
<li>全部的偏差之和恒为零，故样本偏差只和不能累加起来，不能直接用来度量样本散布大小，而改为样本偏差平方和<span class="math inline">\(Q\)</span>. <span class="math display">\[
Q = \sum_{i=1}^{n}(x_i-\overline x)^2
\]</span></li>
<li><p>在样本量不同的场合，偏差平方和<span class="math inline">\(Q\)</span>失去了比较样本散布大小的公平性。为了消除样本量大小对偏差平方和的干扰，改用平均偏差平方和<span class="math inline">\(s_n^2\)</span>来度量， <span class="math display">\[
s_n^2 = \frac{Q}{n} = \frac{1}{n} \sum_{i=1}^{n}(x_i-\overline x)^2
\]</span> 样本方差<span class="math inline">\(s_n^2\)</span>是总体方差<span class="math inline">\(\sigma^2\)</span>的一个估计。</p></li>
<li><p><span class="math inline">\(s_n^2\)</span>的改进。无论从理论还是实际使用中，用样本方差<span class="math inline">\(s_n^2\)</span>估计总体方差<span class="math inline">\(\sigma^2\)</span>多数情况下是偏小的。 证明如下：</p></li>
</ol>
<p><span class="math display">\[\begin{equation}
\begin{aligned}

s_n^2 &amp; = \frac{1}{n}\sum_{i=1}{n}(x_i-\overline x)^2 \\
&amp;= \frac{1}{n}\sum_{i=1}^{n}(x_i^2 - 2x_i\overline x + \overline x^2) \\
&amp; = \frac{1}{n}\sum_{i=1}^{n}x_i^2 - 2\frac{1}{n}\sum_{i=1}^{n}x_i \cdot \overline x + \overline x^2 \\
&amp; = \frac{1}{n}\sum_{i=1}^{n}x_i^2 - \overline x^2 \\

\end{aligned}
\end{equation}\]</span></p>
<p>为了求<span class="math inline">\(E(s_n^2)\)</span>,先求<span class="math inline">\(E(x_i^2),E(\overline x^2)\)</span>,</p>
<p>根据方差基本性质,<a href="http://www.zhusitao.cn/2021/02/02/%E6%9C%9F%E6%9C%9B%E5%92%8C%E6%96%B9%E5%B7%AE%E7%9A%84%E6%80%A7%E8%B4%A8%E5%8F%8A%E8%AF%81%E6%98%8E/">方差和均值关系证明</a>， 样本均值是总体期望的无偏估计，</p>
<ul>
<li><span class="math inline">\(E(x_i^2) = Var(x_i) + (E(x_i))^2=\sigma^2 + \mu^2\)</span></li>
<li><span class="math inline">\(E(\overline x^2) = Var(\overline x) + (E(\overline x))^2 = Var(\frac{\sum x_i}{n})+\mu^2=\frac{1}{n^2}Var(\sum x_i) + \mu^2 = \frac{n\sigma^2}{n^2} + \mu^2 = \frac{\sigma^2}{n} + \mu^2\)</span></li>
</ul>
<p>所以 <span class="math display">\[
E(s_n^2) = \frac{1}{n}\sum_{i=1}^{n}(\sigma^2+\mu^2) - (\frac{\sigma^2}{n} + \mu^2) = (1-\frac{1}{n})\sigma^2 \le \sigma^2
\]</span></p>
<p><span class="math inline">\(s_n^2\)</span>是总体方差<span class="math inline">\(\sigma^2\)</span>的有偏估计。</p>
<p><span class="math display">\[
s^2 = \frac{Q}{f} = \frac{1}{n-1}\sum_{i=1}{n}(x_i-\overline x)^2
\]</span> <span class="math inline">\(s^2\)</span>是总体方差的无偏估计,自由度是n-1。</p>
<p>证明： <span class="math display">\[
E(s^2) = E(\frac{n}{n-1}s_n^2) = \frac{n}{n-1}(1-\frac{1}{n})\sigma^2 = \sigma^2
\]</span></p>
]]></content>
      <tags>
        <tag>统计量</tag>
        <tag>估计量</tag>
        <tag>样本方差</tag>
      </tags>
  </entry>
  <entry>
    <title>超几何分布</title>
    <url>/2021/02/05/%E8%B6%85%E5%87%A0%E4%BD%95%E5%88%86%E5%B8%83/</url>
    <content><![CDATA[<h1 id="超几何分布hypergeometric-distribution">超几何分布（hypergeometric distribution）</h1>
<p>设有N个产品，其中次品有M个。从中任取n个（n&lt;=N-M） 则，n个抽取的产品中次品数目X是离散型随机变量， 概率质量函数如下： <span class="math display">\[P(X=m)=\frac{C_M^m \cdot C_{N-M}^{n-m}}{C_N^n}, (m=0,1,2,...min(M,n))\]</span> 则称 X服从参数为n,m和N的超几何分布，记为 <span class="math inline">\(X \sim H(n, m, N)\)</span> $$ =  </p>
]]></content>
      <tags>
        <tag>概率论</tag>
        <tag>超几何分布</tag>
      </tags>
  </entry>
  <entry>
    <title>逻辑回归</title>
    <url>/2021/09/07/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<h2 id="逻辑回归的前世今生">逻辑回归的前世今生</h2>
<p>与传统的线性回归不同，逻辑回归在传统的线性回归的输出端加上一个logit函数， 使得输出有连续变成离散，每个取值代表不同的类别，从回归任务转成了分类任务， 所以逻辑回归在名字上还保留的回归字眼，但是却成了分类的代表之一。<br>
一句话总结：逻辑回归假设数据分布服从伯努利分布，通过极大似然函数的方法， 运用梯度下降来求解参数，来实现二分类。</p>
<h3 id="逻辑回归的基本假设">1.逻辑回归的基本假设</h3>
<h4 id="第一个基本假设">第一个基本假设</h4>
<p>假设数据分布服从伯努利分布。伯努利分布，对于抛硬币来说， <span class="math inline">\(p\)</span>是硬币为正的概率，<span class="math inline">\(1-p\)</span>为硬币为负的概率；同样，在逻辑回归的模型中，假设<span class="math inline">\(h_{\theta}(x)\)</span> 为样本正的概率，<span class="math inline">\(1-h_{\theta}(x)\)</span>为样本为负的概率。整个模型如下： <span class="math display">\[
h_\theta(x;\theta) = p
\]</span></p>
<h4 id="第二个假设">第二个假设</h4>
<p>假设样本为正的概率为： <span class="math display">\[
p = \frac{1}{1+e^{-\theta^{T}x}}
\]</span></p>
<p>所以最终的表达式为： <span class="math display">\[
h_\theta(x;\theta) = \frac{1}{1+e^{-\theta^{T}x}}
\]</span></p>
<h3 id="逻辑回归的损失函数">2.逻辑回归的损失函数</h3>
<p>逻辑回归采用最大似然函数作为损失函数。</p>
<p>逻辑回归中<span class="math inline">\(y\in {0,1}\)</span>。约定<span class="math inline">\(\hat{y}=P(y=1|x)\)</span>。</p>
<h4 id="对一个样本">对一个样本</h4>
<p>可知 <span class="math display">\[
P(y|x) = \begin{cases}
\hat{y}    ,  y=1, \\
1 - \hat{y},  y=0
\end{cases}
\]</span></p>
<p>写成一个函数 <span class="math display">\[
P(y|x) = \hat{y}^{y}(1-\hat{y})^{1-y}
\]</span></p>
<p><span class="math inline">\(\log\)</span>变换不改变函数的单调性，同时乘法变成加法简化计算，所以上式换个马甲，整理如下： <span class="math display">\[
\log(P(y|x)) = y\log(\hat{y}) + (1-y)\log(1-\hat{y})
\]</span></p>
<p>我们的目的就是最大化上述函数，使得模型更加拟合我们的数据。使用梯度下降法来求解，因此需要对上式取反，求最大值转化成求最小值。 <span class="math display">\[
L(w,b) = -[y\log\hat{y} + (1-y)\log(1-\hat{y})]
\]</span></p>
<h4 id="全部样本-training">全部样本 (training)</h4>
<p>在全部训练集m上训练求得全部的损失函数。假设样本独立同分布，概率分布函数为每个样本的连乘。 <span class="math display">\[
P(y|x_1,x_2,...,x_m) = \prod_{i=1}^{m} P(y|x_i)
\]</span> 上式取对数，连成转化成加法，加速计算，使用极大似然法求得概率最大时对应的参数。 采取一个样本的计算处理，最小化函数取反，得:</p>
<p><span class="math display">\[
J(w,b) = -\sum_{i=1}^{m}y^{i}\log{\hat{y}^i} + (1-y^i)\log({1-\hat{y}^{i}})
\]</span></p>
]]></content>
  </entry>
  <entry>
    <title>GFF和GTF中frame计算过程</title>
    <url>/2023/12/01/GFF%E5%92%8CGTF%E4%B8%ADframe%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p>GFF/GTF是基因组注释中常用的文件格式，两者的主要差别在最后一列。 第八列中的frame，用来表示当前特征在CDS编码中的相关信息。</p>
<h2 id="frame-可选值">1. frame 可选值</h2>
<ul>
<li>0, 0表示当前编码的CDS是从当前特征的第一个碱基开始解码，即该CDS的第一个碱基是完整密码子的第一个碱基。</li>
<li>1, 1表示当前编码的CDS是从第二个碱基开始解码，即该CDS的第二个碱基是完整密码子的第一个碱基。</li>
<li>2, 2表示当前编码的CDS是从第三个碱基开始解码，即该CDS的第三个碱基是完整密码子的第一个碱基。</li>
</ul>
<h2 id="frame-计算">2. frame 计算</h2>
<h3 id="定义函数">定义函数</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span>(<span class="params">length, frame</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;frame calculate formula</span></span><br><span class="line"><span class="string">    length - frame: 前面的CDS特征长度减去它自己的frame值，表示在前面CDS特征上的第一个完整的密码子开始的长度。</span></span><br><span class="line"><span class="string">    ((length-frame) % 3): 前面CDS特征3&#x27;端最后一个完整密码子之后剩下的碱基数。</span></span><br><span class="line"><span class="string">    (3- ((length-frame) % 3)): 是除去特征的3&#x27;端所代表的碱基后，密码子中剩余的碱基数目。</span></span><br><span class="line"><span class="string">    (3- ((length-frame) % 3)) % 3: 把3变成0，因为三个碱基组成一个完整的密码子，1和2保持不变。</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    params: </span></span><br><span class="line"><span class="string">      length: previous feature length (5&#x27;-&gt;3&#x27;)</span></span><br><span class="line"><span class="string">      frame: previous feature frame (5&#x27;-&gt;3&#x27;)</span></span><br><span class="line"><span class="string">    return: </span></span><br><span class="line"><span class="string">       next feature frame</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">3</span>- ((length-frame) % <span class="number">3</span>)) % <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_frame</span>(<span class="params">lengths, strand</span>):</span></span><br><span class="line">    <span class="keyword">if</span> strand == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">        lengths = lengths[::-<span class="number">1</span>]</span><br><span class="line">    frames = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lengths)):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">            frames.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            frame = b(lengths[i-<span class="number">1</span>], frames[i-<span class="number">1</span>])</span><br><span class="line">            frames.append(frame)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> frames</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># + example</span></span><br><span class="line">    <span class="comment"># length_list = [169,101,123,186,222,154,150,89,204,108,135,132,133,93,126,126,144,129,161]</span></span><br><span class="line">    <span class="comment"># strand = &quot;+&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># - example</span></span><br><span class="line">    length_list = [<span class="number">278</span>,<span class="number">778</span>,<span class="number">231</span>]</span><br><span class="line">    strand = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">    print(cal_frame(length_list, strand))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="对于正链">对于正链 +</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat Araport11_GFF3_genes_transposons.Mar92021.correct.gff | grep AT1G01950.1 | awk <span class="string">&#x27;$3~/CDS/&#x27;</span></span><br><span class="line">Chr1	Araport11	CDS	325473	325641	.	+	0	ID=AT1G01950:CDS:1;Parent=AT1G01950.1;Name=ARK2:CDS:1</span><br><span class="line">Chr1	Araport11	CDS	325913	326013	.	+	2	ID=AT1G01950:CDS:2;Parent=AT1G01950.1;Name=ARK2:CDS:2</span><br><span class="line">Chr1	Araport11	CDS	326106	326228	.	+	0	ID=AT1G01950:CDS:3;Parent=AT1G01950.1;Name=ARK2:CDS:3</span><br><span class="line">Chr1	Araport11	CDS	326332	326517	.	+	0	ID=AT1G01950:CDS:4;Parent=AT1G01950.1;Name=ARK2:CDS:4</span><br><span class="line">Chr1	Araport11	CDS	326594	326815	.	+	0	ID=AT1G01950:CDS:6;Parent=AT1G01950.1;Name=ARK2:CDS:6</span><br><span class="line">Chr1	Araport11	CDS	326931	327084	.	+	0	ID=AT1G01950:CDS:7;Parent=AT1G01950.1;Name=ARK2:CDS:7</span><br><span class="line">Chr1	Araport11	CDS	327237	327386	.	+	2	ID=AT1G01950:CDS:8;Parent=AT1G01950.1;Name=ARK2:CDS:8</span><br><span class="line">Chr1	Araport11	CDS	327488	327576	.	+	2	ID=AT1G01950:CDS:9;Parent=AT1G01950.1;Name=ARK2:CDS:9</span><br><span class="line">Chr1	Araport11	CDS	327663	327866	.	+	0	ID=AT1G01950:CDS:10;Parent=AT1G01950.1;Name=ARK2:CDS:10</span><br><span class="line">Chr1	Araport11	CDS	328000	328107	.	+	0	ID=AT1G01950:CDS:11;Parent=AT1G01950.1;Name=ARK2:CDS:11</span><br><span class="line">Chr1	Araport11	CDS	328188	328322	.	+	0	ID=AT1G01950:CDS:12;Parent=AT1G01950.1;Name=ARK2:CDS:12</span><br><span class="line">Chr1	Araport11	CDS	328424	328555	.	+	0	ID=AT1G01950:CDS:14;Parent=AT1G01950.1;Name=ARK2:CDS:14</span><br><span class="line">Chr1	Araport11	CDS	328898	329030	.	+	0	ID=AT1G01950:CDS:17;Parent=AT1G01950.1;Name=ARK2:CDS:17</span><br><span class="line">Chr1	Araport11	CDS	329119	329211	.	+	2	ID=AT1G01950:CDS:18;Parent=AT1G01950.1;Name=ARK2:CDS:18</span><br><span class="line">Chr1	Araport11	CDS	329311	329436	.	+	2	ID=AT1G01950:CDS:19;Parent=AT1G01950.1;Name=ARK2:CDS:19</span><br><span class="line">Chr1	Araport11	CDS	329573	329698	.	+	2	ID=AT1G01950:CDS:20;Parent=AT1G01950.1;Name=ARK2:CDS:20</span><br><span class="line">Chr1	Araport11	CDS	329781	329924	.	+	2	ID=AT1G01950:CDS:21;Parent=AT1G01950.1;Name=ARK2:CDS:21</span><br><span class="line">Chr1	Araport11	CDS	330027	330155	.	+	2	ID=AT1G01950:CDS:22;Parent=AT1G01950.1;Name=ARK2:CDS:22</span><br><span class="line">Chr1	Araport11	CDS	330243	330403	.	+	2	ID=AT1G01950:CDS:23;Parent=AT1G01950.1;Name=ARK2:CDS:23</span><br><span class="line"></span><br><span class="line">$ cat Araport11_GFF3_genes_transposons.Mar92021.correct.gff | grep AT1G01950.1 | awk <span class="string">&#x27;$3~/CDS/&#x27;</span> | awk <span class="string">&#x27;&#123;print$5-$4+1&#125;&#x27;</span> | xargs | sed <span class="string">&#x27;s/ /,/g&#x27;</span></span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 169,101,123,186,222,154,150,89,204,108,135,132,133,93,126,126,144,129,161</span></span><br><span class="line">$ <span class="comment"># [0, 2, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2]</span></span><br></pre></td></tr></table></figure>
<h3 id="对于负链--">对于负链 -</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat Araport11_GFF3_genes_transposons.Mar92021.correct.gff  | grep AT1G01090.1 | awk <span class="string">&#x27;$3~/CDS/&#x27;</span></span><br><span class="line">Chr1	Araport11	CDS	47705	47982	.	-	2	ID=AT1G01090:CDS:3;Parent=AT1G01090.1;Name=PDH-E1 ALPHA:CDS:3</span><br><span class="line">Chr1	Araport11	CDS	48075	48852	.	-	0	ID=AT1G01090:CDS:2;Parent=AT1G01090.1;Name=PDH-E1 ALPHA:CDS:2</span><br><span class="line">Chr1	Araport11	CDS	48936	49166	.	-	0	ID=AT1G01090:CDS:1;Parent=AT1G01090.1;Name=PDH-E1 ALPHA:CDS:1</span><br><span class="line"></span><br><span class="line">$ cat Araport11_GFF3_genes_transposons.Mar92021.correct.gff  | grep AT1G01090.1 | awk <span class="string">&#x27;$3~/CDS/&#x27;</span> | awk <span class="string">&#x27;&#123;print$5-$4+1&#125;&#x27;</span> | xargs | sed <span class="string">&#x27;s/ /,/g&#x27;</span></span><br><span class="line"></span><br><span class="line">$ <span class="comment"># 278,778,231</span></span><br><span class="line">$ <span class="comment"># [0, 0, 2]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>file format</category>
      </categories>
  </entry>
  <entry>
    <title>SAM文件flags解释</title>
    <url>/2023/12/03/SAM%E6%96%87%E4%BB%B6flags%E8%A7%A3%E9%87%8A/</url>
    <content><![CDATA[<h2 id="SAM-flag"><a href="#SAM-flag" class="headerlink" title="SAM flag"></a>SAM flag</h2><p>SAM文件是二进制比对文件，其中FLAG值记录了该read的比对信息。<br>FLAG巧妙地采用二进制来存储信息，解读FLAG即可确定read属性，所以samtools常常依据FLAG来过滤处理SAM/BAM。</p>
<h2 id="Python-code"><a href="#Python-code" class="headerlink" title="Python code"></a>Python code</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_args</span>():</span></span><br><span class="line">    parser = argparse.ArgumentParser()</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;-i&#x27;</span>, <span class="string">&#x27;--input&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, required=<span class="literal">True</span>,</span><br><span class="line">                           <span class="built_in">help</span>=<span class="string">&#x27;flags in SAM&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flags_cal</span>(<span class="params">flag: <span class="built_in">int</span></span>):</span></span><br><span class="line">    falgs = [<span class="number">0x1</span>, <span class="number">0x2</span>, <span class="number">0x4</span>, <span class="number">0x8</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x100</span>, <span class="number">0x200</span>, <span class="number">0x400</span>, <span class="number">0x800</span>]</span><br><span class="line">    flags_dict = &#123;</span><br><span class="line">        <span class="number">0x1</span>: [<span class="string">&#x27;PAIRED&#x27;</span>, <span class="string">&#x27;..paired-end (or multiple-segment) sequencing technology&#x27;</span>],</span><br><span class="line">        <span class="number">0x2</span>: [<span class="string">&#x27;PROPER_PAIR&#x27;</span>, <span class="string">&#x27;..each segment properly aligned according to the aligner&#x27;</span>],</span><br><span class="line">        <span class="number">0x4</span>: [<span class="string">&#x27;UNMAP&#x27;</span>, <span class="string">&#x27;..segment unmapped&#x27;</span>],</span><br><span class="line">        <span class="number">0x8</span>: [<span class="string">&#x27;MUNMAP&#x27;</span>, <span class="string">&#x27;..next segment in the template unmapped&#x27;</span>],</span><br><span class="line">        <span class="number">0x10</span>: [<span class="string">&#x27;REVERSE&#x27;</span>, <span class="string">&#x27;..SEQ is reverse complemented&#x27;</span>],</span><br><span class="line">        <span class="number">0x20</span>: [<span class="string">&#x27;MREVERSE&#x27;</span>, <span class="string">&#x27;..SEQ of the next segment in the template is reversed&#x27;</span>],</span><br><span class="line">        <span class="number">0x40</span>: [<span class="string">&#x27;READ1&#x27;</span>, <span class="string">&#x27;..the first segment in the template&#x27;</span>],</span><br><span class="line">        <span class="number">0x80</span>: [<span class="string">&#x27;READ2&#x27;</span>, <span class="string">&#x27;..the last segment in the template&#x27;</span>],</span><br><span class="line">        <span class="number">0x100</span>: [<span class="string">&#x27;SECONDARY&#x27;</span>, <span class="string">&#x27;..secondary alignment&#x27;</span>],</span><br><span class="line">        <span class="number">0x200</span>: [<span class="string">&#x27;QCFAIL&#x27;</span>, <span class="string">&#x27;..not passing quality controls&#x27;</span>],</span><br><span class="line">        <span class="number">0x400</span>: [<span class="string">&#x27;DUPLICATE&#x27;</span>, <span class="string">&#x27;..PCR or optical duplicate&#x27;</span>],</span><br><span class="line">        <span class="number">0x800</span>: [<span class="string">&#x27;SUPPLEMENTARY&#x27;</span>, <span class="string">&#x27;..supplementary alignment&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    binary = <span class="built_in">bin</span>(flag)</span><br><span class="line">    index_falgs = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">list</span>(binary[<span class="number">2</span>:][::-<span class="number">1</span>])))</span><br><span class="line">    index_list = []</span><br><span class="line">    hex_list = []</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">f&#x27;Flags: <span class="subst">&#123;flag&#125;</span>&#x27;</span>)</span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">&quot;Hex\tDec\tProperty\tInformation&quot;</span>) </span><br><span class="line">    Props = []</span><br><span class="line">    <span class="keyword">for</span> index,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(index_falgs):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">            index_list.append(index_list)</span><br><span class="line">            hexs = falgs[index]</span><br><span class="line">            ints = <span class="built_in">int</span>(hexs)</span><br><span class="line">            info = flags_dict[hexs]</span><br><span class="line">            Props.append(info[<span class="number">0</span>])</span><br><span class="line">            print(<span class="string">&quot;&#123;:&lt;#x&#125;\t&#123;:&lt;5d&#125;\t&#123;:&lt;11s&#125;\t&#123;:&lt;50s&#125;&quot;</span>.<span class="built_in">format</span>(hexs, ints, info[<span class="number">0</span>], info[<span class="number">1</span>]))</span><br><span class="line">            <span class="comment"># print(&quot;%#x %s %s %s &quot;%(hexs, hexs, info[0], info[1]))</span></span><br><span class="line">    print()</span><br><span class="line">    print(<span class="string">&quot;&#123;&#125;\t&#123;:&lt;5d&#125;\t&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(flag), flag, <span class="string">&quot;,&quot;</span>.join(Props)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    args = parse_args()</span><br><span class="line">    flags_cal(args.<span class="built_in">input</span>)</span><br></pre></td></tr></table></figure>

<p>执行程序即可解析</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python flags_explain.py -i 1294 </span><br><span class="line">Flags: 1294</span><br><span class="line"></span><br><span class="line">Hex	Dec	Property	Information</span><br><span class="line">0x2	2    	PROPER_PAIR	..each segment properly aligned according to the aligner</span><br><span class="line">0x4	4    	UNMAP      	..segment unmapped                                </span><br><span class="line">0x8	8    	MUNMAP     	..next segment <span class="keyword">in</span> the template unmapped           </span><br><span class="line">0x100	256  	SECONDARY  	..secondary alignment                             </span><br><span class="line">0x400	1024 	DUPLICATE  	..PCR or optical duplicate                        </span><br><span class="line"></span><br><span class="line">0x50e	1294 	PROPER_PAIR,UNMAP,MUNMAP,SECONDARY,DUPLICATE</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>序列比对中的动态规划算法</title>
    <url>/2023/12/04/%E5%BA%8F%E5%88%97%E6%AF%94%E5%AF%B9%E4%B8%AD%E7%9A%84%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="动态规划">动态规划</h2>
<p>动态规划(dynamic programming), 是一种求解多阶段决策过程最优化问题的算法。 核心思想就是: (1),将一个大问题拆解成一堆子问题，(2),求解出子问题的解，存储起来当再次需要求解此问题时候可以被重复利用，避免重复的计算过程。 能够使用DP必须满足下面三个特征:<br>
(1), 最优子结构性质。一个问题的最优解包含其子问题的最优解。<br>
(2), 重叠子问题性质。在求解子问题的过程中，会有大量的子问题的是重复的，可以将子问题的结果存储，后续直接查询，避免重复计算。 (3), 无后效性。子问题的解只与之前的阶段有关，与后面的阶段无关。</p>
<h3 id="算法解释">1 算法解释</h3>
<p>对于序列比对问题，我们想知道两个序列之间的存在的差异，首先我们想了解全局比对的差异。 对于全局比对，前人开发出Needleman-Wunsch算法，该算法是基于动态规划的全局比对算法。</p>
<p><span class="math display">\[ F(i, j)=max \left\{
\begin{aligned}
F(i-1, j-1) + s(x_i, y_j) \\
F(i-1, j) + s(x_i, -) \\
F(i, j-1) + s(-, y_j)
\end{aligned}
\right.
\]</span></p>
<p><span class="math inline">\(F(i-1, j-1) + s(x_i, y_j)\)</span> 前半部分<span class="math inline">\(F(i-1, j-1)\)</span>表示前面<span class="math inline">\(i-1\)</span>和<span class="math inline">\(j-1\)</span>比对计算完成的情况下， 比对两条序列的当前碱基<span class="math inline">\(x_i\)</span>和<span class="math inline">\(y_j\)</span>, <span class="math inline">\(s(x_i, y_j)\)</span>表示当前的替换分数。</p>
<p><span class="math inline">\(F(i-1, j) + s(x_i, -)\)</span> 前半部分<span class="math inline">\(F(i-1, j)\)</span>表示前面<span class="math inline">\(i-1\)</span>和<span class="math inline">\(j\)</span>比对计算完成的情况下， 比对<span class="math inline">\(x\)</span>序列的当前碱基<span class="math inline">\(x_i\)</span>和<span class="math inline">\(y\)</span>序列空白<span class="math inline">\(-\)</span>, <span class="math inline">\(s(x_i, -)\)</span>表示<span class="math inline">\(x\)</span>序列当前碱基和gap的替换分数。</p>
<p><span class="math inline">\(F(i, j-1) + s(-, y_j)\)</span> 前半部分<span class="math inline">\(F(i, j-1)\)</span>表示前面<span class="math inline">\(i\)</span>和<span class="math inline">\(j-1\)</span>比对计算完成的情况下，<br>
比对<span class="math inline">\(y\)</span>序列的当前碱基<span class="math inline">\(y_j\)</span>和<span class="math inline">\(x\)</span>序列空白<span class="math inline">\(-\)</span>, <span class="math inline">\(s(-, y_j)\)</span>表示<span class="math inline">\(y\)</span>序列当前碱基和gap的替换分数。</p>
<h3 id="罚分矩阵">2 罚分矩阵</h3>
<p>常见的罚分矩阵有几种： - 等价矩阵：碱基相同为1，不同为0 - 转换-颠换矩阵：嘌呤(AG)之间为转换，嘧啶(TC)之间为转换，嘧啶和嘌呤之间为颠换 - BLAST矩阵：碱基相同为5，碱基不同为-4</p>
<p>这里实现的代码采用自定的一个矩阵，具体如下：<br>
对角线为自身比对上的分数0，即match。<br>
嘌呤A/G之间比对分数为2，即mismatch。<br>
嘧啶T/C之间比对分数为2，即mismatch。<br>
嘧啶(T/C)和嘌呤(A/G)之间的比对分数为4, 即mismatch。<br>
空白罚分为8，即gap。<br>
Gap一般分2种:<br>
Gap opening(只有出现一个就罚分)，<br>
Gap extension(在一空位的扩大，拓展空位罚分，长度越长，罚分越多)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 因为我们采用的是正数罚分矩阵，</span></span><br><span class="line"><span class="comment"># 所以最佳比对是罚分最小的</span></span><br><span class="line">   A  T  G  C  -</span><br><span class="line">A  0  4  2  4  8</span><br><span class="line">T  4  0  4  2  8</span><br><span class="line">G  2  4  0  4  8</span><br><span class="line">C  4  2  4  0  8</span><br><span class="line">-  8  8  8  8  8</span><br></pre></td></tr></table></figure>
<h3 id="全局比对python实现">3 全局比对python实现</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alphabet = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line">score = [[<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">8</span>],</span><br><span class="line">         [<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">globalAlignment</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Needleman-Wunsch algorithm</span></span><br><span class="line"><span class="string">    x : (str) sequence a</span></span><br><span class="line"><span class="string">    y : (str) sequence b</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建一个距离矩阵，记录比对过程</span></span><br><span class="line">    D = []</span><br><span class="line">    <span class="comment"># 初始化矩阵，全部填充0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)+<span class="number">1</span>):</span><br><span class="line">        D.append([<span class="number">0</span>] * (<span class="built_in">len</span>(y)+<span class="number">1</span>))</span><br><span class="line">     </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 初始化第一列，都填上空白的罚分，随着位置累加</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 二维数组的第二索引为0</span></span><br><span class="line">        D[i][<span class="number">0</span>] = D[i-<span class="number">1</span>][<span class="number">0</span>] + score[alphabet.index(x[i-<span class="number">1</span>])][-<span class="number">1</span>]</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 初始化第一行,都填上空白的罚分，随着位置累加</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(y)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 二维数组的第一索引为0 </span></span><br><span class="line">        D[<span class="number">0</span>][j] = D[<span class="number">0</span>][j-<span class="number">1</span>] + score[-<span class="number">1</span>][alphabet.index(y[j-<span class="number">1</span>])]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 填充剩余的矩阵 </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(y)+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 水平距离，x(i)和y(j-1)比对上，yj位置gap罚分</span></span><br><span class="line">            <span class="comment"># D[i][j-1]未知，后一项罚分已知</span></span><br><span class="line">            distHor = D[i][j-<span class="number">1</span>] + score[-<span class="number">1</span>][alphabet.index(y[j-<span class="number">1</span>])]</span><br><span class="line">            <span class="comment"># 垂直距离，x(i-1)和y(j)比对上，xi位置gap罚分</span></span><br><span class="line">            <span class="comment"># D[i-1][j]未知，后一项罚分已知</span></span><br><span class="line">            distVer = D[i-<span class="number">1</span>][j] + score[alphabet.index(x[i-<span class="number">1</span>])][-<span class="number">1</span>]</span><br><span class="line">            <span class="comment"># 对角线距离，x(i-1)和y(j-1)比对上，xi和yj错配罚分</span></span><br><span class="line">            <span class="comment"># D[i-1][j-1]未知，后一项罚分已知</span></span><br><span class="line">            distDiag = D[i-<span class="number">1</span>][j-<span class="number">1</span>] + score[alphabet.index(x[i-<span class="number">1</span>])][alphabet.index(y[j-<span class="number">1</span>])]</span><br><span class="line">            <span class="comment"># 取最小值的比对路线，记录比对值, 该值在后续上面的三个距离计算中重复使用，避免循环暴力递归</span></span><br><span class="line">            <span class="comment"># 这里才是动态规划算法的核心所在。</span></span><br><span class="line">            D[i][j] = <span class="built_in">min</span>(distHor, distVer, distDiag) <span class="comment"># 即问题分解成上述三个子问题，罚分最小才是最佳比对,视罚分函数而定</span></span><br><span class="line">    <span class="comment"># 返回右下角的值, 最佳的比对值</span></span><br><span class="line">    <span class="keyword">return</span> D, D[-<span class="number">1</span>][-<span class="number">1</span>] </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="string">&#x27;TATGTCATGC&#x27;</span></span><br><span class="line">y = <span class="string">&#x27;AATGTCATGC&#x27;</span></span><br><span class="line">D, value = globalAlignment(x,y)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">d = np.array(D)</span><br><span class="line">np.diagonal(d)</span><br><span class="line">print(value)</span><br><span class="line">print(D)</span><br></pre></td></tr></table></figure>
<h3 id="局部比对">4 局部比对</h3>
<p>在生物学序列比对中，由于内含子或者motif的因素的存在，我们常常需要算出局部最佳的比对情况， 类似最大子串问题，因此需要局部比对，前人实现了smith-waterman算法来解决这个问题。 和全局比对相比，局部比对在算法上只有一点不同。</p>
<p><span class="math display">\[ F(i, j)= max \left\{
\begin{aligned}
F(i-1, j-1) + s(x_i, y_j) \\
F(i-1, j) + s(x_i, -) \\
F(i, j-1) + s(-, y_j) \\
0
\end{aligned}
\right.
\]</span></p>
<h3 id="局部比对python实现">5 局部比对python实现</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">costFunction</span>(<span class="params">xc, yc</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27; 自定义一个罚分矩阵 </span></span><br><span class="line"><span class="string">    2 to match, -6 to gap, -4 to mismatch </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 比对上match </span></span><br><span class="line">    <span class="keyword">if</span> xc == yc:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    <span class="comment"># 空白 gap</span></span><br><span class="line">    <span class="keyword">if</span> xc == <span class="string">&#x27;-&#x27;</span> <span class="keyword">or</span> yc == <span class="string">&#x27;-&#x27;</span>: </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">6</span></span><br><span class="line">    <span class="comment"># 错配 mismatch </span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">localAlignment</span>(<span class="params">x, y, s</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    Smith-Waterman algorithm</span></span><br><span class="line"><span class="string">    Calculate local alignment values of sequences x and y using</span></span><br><span class="line"><span class="string">    dynamic programming.  Return maximal local alignment value. </span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 初始化二维数组记录子问题的解</span></span><br><span class="line">    D = numpy.zeros((<span class="built_in">len</span>(x)+<span class="number">1</span>, <span class="built_in">len</span>(y)+<span class="number">1</span>), dtype=<span class="built_in">int</span>)</span><br><span class="line">    <span class="comment"># 开始循环比对</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(x)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(y)+<span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 这里选最大值是因为match的罚分是正数, gap和mismatch的是负数</span></span><br><span class="line">            D[i, j] = <span class="built_in">max</span>(D[i-<span class="number">1</span>, j-<span class="number">1</span>] + s(x[i-<span class="number">1</span>], y[j-<span class="number">1</span>]), <span class="comment"># 对角线，  前i-1和j-1比对完成, 计算i,j位置的罚分</span></span><br><span class="line">                          D[i-<span class="number">1</span>, j  ] + s(x[i-<span class="number">1</span>], <span class="string">&#x27;-&#x27;</span>),    <span class="comment"># 垂直方向，前i-1和j比对完成，计算i和gap的罚分</span></span><br><span class="line">                          D[i  , j-<span class="number">1</span>] + s(<span class="string">&#x27;-&#x27;</span>,    y[j-<span class="number">1</span>]), <span class="comment"># 水平方向，前i和j-1比对完成，计算gap和j的罚分</span></span><br><span class="line">                          <span class="number">0</span>)                               <span class="comment"># 空值</span></span><br><span class="line">    argmax = numpy.where(D == D.<span class="built_in">max</span>()) <span class="comment"># 最大值的索引</span></span><br><span class="line">    <span class="keyword">return</span> D, <span class="built_in">int</span>(D[argmax])</span><br><span class="line"></span><br><span class="line">x, y = <span class="string">&#x27;GGTATGCTGGCGCTA&#x27;</span>, <span class="string">&#x27;TATATGCGGCGTTT&#x27;</span></span><br><span class="line">D, best = localAlignment(x, y, exampleCost)</span><br><span class="line">print(D)</span><br><span class="line">print(<span class="string">&quot;Best score=%d, in cell %s&quot;</span> % (best, numpy.unravel_index(numpy.argmax(D), D.shape)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>测序碱基质量值</title>
    <url>/2023/12/07/%E6%B5%8B%E5%BA%8F%E7%A2%B1%E5%9F%BA%E8%B4%A8%E9%87%8F%E5%80%BC/</url>
    <content><![CDATA[<h2 id="测序碱基质量值">测序碱基质量值</h2>
<p>对于高通量测序来说，碱基质量值是衡量测序数据的重要指标。碱基质量值常用Phred Quality Score 表示，简写Q。 p值表示碱基被测错误的概率, p越小，Q越大。</p>
<p><span class="math display">\[
Q=-10log_{10}p
\]</span></p>
<ul>
<li>Q&amp;p转换</li>
</ul>
<p><span class="math display">\[
p = 10^{Q \over -10}
\]</span></p>
<h2 id="python-q-p转换实现">python Q-p转换实现</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_prob</span>(<span class="params">quality</span>):</span></span><br><span class="line">    qval = quality </span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>**(qval/-<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;&#123;0:^5&#125; &#123;1:^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Phred&quot;</span>, <span class="string">&quot;Prob of&quot;</span>))</span><br><span class="line">print(<span class="string">&quot;&#123;0:^5&#125; &#123;1:^10&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;score&quot;</span>, <span class="string">&quot;error&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> phred <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">42</span>):</span><br><span class="line">    print(<span class="string">&quot;&#123;0:^5&#125; &#123;1:03.5f&#125;&quot;</span>.<span class="built_in">format</span>(phred, error_prob(phred)))</span><br><span class="line"></span><br><span class="line">Phred  Prob of  </span><br><span class="line">score   error   </span><br><span class="line">  <span class="number">0</span>   <span class="number">1.00000</span></span><br><span class="line">  <span class="number">1</span>   <span class="number">0.79433</span></span><br><span class="line">  <span class="number">2</span>   <span class="number">0.63096</span></span><br><span class="line">  <span class="number">3</span>   <span class="number">0.50119</span></span><br><span class="line">  <span class="number">4</span>   <span class="number">0.39811</span></span><br><span class="line">  <span class="number">5</span>   <span class="number">0.31623</span></span><br><span class="line">  <span class="number">6</span>   <span class="number">0.25119</span></span><br><span class="line">  <span class="number">7</span>   <span class="number">0.19953</span></span><br><span class="line">  <span class="number">8</span>   <span class="number">0.15849</span></span><br><span class="line">  <span class="number">9</span>   <span class="number">0.12589</span></span><br><span class="line"> <span class="number">10</span>   <span class="number">0.10000</span></span><br><span class="line"> <span class="number">11</span>   <span class="number">0.07943</span></span><br><span class="line"> <span class="number">12</span>   <span class="number">0.06310</span></span><br><span class="line"> <span class="number">13</span>   <span class="number">0.05012</span></span><br><span class="line"> <span class="number">14</span>   <span class="number">0.03981</span></span><br><span class="line"> <span class="number">15</span>   <span class="number">0.03162</span></span><br><span class="line"> <span class="number">16</span>   <span class="number">0.02512</span></span><br><span class="line"> <span class="number">17</span>   <span class="number">0.01995</span></span><br><span class="line"> <span class="number">18</span>   <span class="number">0.01585</span></span><br><span class="line"> <span class="number">19</span>   <span class="number">0.01259</span></span><br><span class="line"> <span class="number">20</span>   <span class="number">0.01000</span></span><br><span class="line"> <span class="number">21</span>   <span class="number">0.00794</span></span><br><span class="line"> <span class="number">22</span>   <span class="number">0.00631</span></span><br><span class="line"> <span class="number">23</span>   <span class="number">0.00501</span></span><br><span class="line"> <span class="number">24</span>   <span class="number">0.00398</span></span><br><span class="line"> <span class="number">25</span>   <span class="number">0.00316</span></span><br><span class="line"> <span class="number">26</span>   <span class="number">0.00251</span></span><br><span class="line"> <span class="number">27</span>   <span class="number">0.00200</span></span><br><span class="line"> <span class="number">28</span>   <span class="number">0.00158</span></span><br><span class="line"> <span class="number">29</span>   <span class="number">0.00126</span></span><br><span class="line"> <span class="number">30</span>   <span class="number">0.00100</span></span><br><span class="line"> <span class="number">31</span>   <span class="number">0.00079</span></span><br><span class="line"> <span class="number">32</span>   <span class="number">0.00063</span></span><br><span class="line"> <span class="number">33</span>   <span class="number">0.00050</span></span><br><span class="line"> <span class="number">34</span>   <span class="number">0.00040</span></span><br><span class="line"> <span class="number">35</span>   <span class="number">0.00032</span></span><br><span class="line"> <span class="number">36</span>   <span class="number">0.00025</span></span><br><span class="line"> <span class="number">37</span>   <span class="number">0.00020</span></span><br><span class="line"> <span class="number">38</span>   <span class="number">0.00016</span></span><br><span class="line"> <span class="number">39</span>   <span class="number">0.00013</span></span><br><span class="line"> <span class="number">40</span>   <span class="number">0.00010</span></span><br><span class="line"> <span class="number">41</span>   <span class="number">0.00008</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="ascii-codes">Ascii Codes</h2>
<p>测序文件中使用的是Ascii Codes字符，每个字符代表一个phred值。 Ascii Codes字符在计算机中和整型数字一一对应。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;&#123;0:^8&#125;  &#123;1:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Character&quot;</span>, <span class="string">&quot;ASCII #&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">90</span>):</span><br><span class="line">    print(<span class="string">&quot;&#123;0:^8&#125;  &#123;1:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(i),i))</span><br><span class="line">Character  ASCII <span class="comment">#</span></span><br><span class="line">   !         <span class="number">33</span>   </span><br><span class="line">   <span class="string">&quot;         34   </span></span><br><span class="line"><span class="string">   #         35   </span></span><br><span class="line"><span class="string">   $         36   </span></span><br><span class="line"><span class="string">   %         37   </span></span><br><span class="line"><span class="string">   &amp;         38   </span></span><br><span class="line"><span class="string">   &#x27;         39   </span></span><br><span class="line"><span class="string">   (         40   </span></span><br><span class="line"><span class="string">   )         41   </span></span><br><span class="line"><span class="string">   *         42   </span></span><br><span class="line"><span class="string">   +         43   </span></span><br><span class="line"><span class="string">   ,         44   </span></span><br><span class="line"><span class="string">   -         45   </span></span><br><span class="line"><span class="string">   .         46   </span></span><br><span class="line"><span class="string">   /         47   </span></span><br><span class="line"><span class="string">   0         48   </span></span><br><span class="line"><span class="string">   1         49   </span></span><br><span class="line"><span class="string">   2         50   </span></span><br><span class="line"><span class="string">   3         51   </span></span><br><span class="line"><span class="string">   4         52   </span></span><br><span class="line"><span class="string">   5         53   </span></span><br><span class="line"><span class="string">   6         54   </span></span><br><span class="line"><span class="string">   7         55   </span></span><br><span class="line"><span class="string">   8         56   </span></span><br><span class="line"><span class="string">   9         57   </span></span><br><span class="line"><span class="string">   :         58   </span></span><br><span class="line"><span class="string">   ;         59   </span></span><br><span class="line"><span class="string">   &lt;         60   </span></span><br><span class="line"><span class="string">   =         61   </span></span><br><span class="line"><span class="string">   &gt;         62   </span></span><br><span class="line"><span class="string">   ?         63   </span></span><br><span class="line"><span class="string">   @         64   </span></span><br><span class="line"><span class="string">   A         65   </span></span><br><span class="line"><span class="string">   B         66   </span></span><br><span class="line"><span class="string">   C         67   </span></span><br><span class="line"><span class="string">   D         68   </span></span><br><span class="line"><span class="string">   E         69   </span></span><br><span class="line"><span class="string">   F         70   </span></span><br><span class="line"><span class="string">   G         71   </span></span><br><span class="line"><span class="string">   H         72   </span></span><br><span class="line"><span class="string">   I         73   </span></span><br><span class="line"><span class="string">   J         74   </span></span><br><span class="line"><span class="string">   K         75   </span></span><br><span class="line"><span class="string">   L         76   </span></span><br><span class="line"><span class="string">   M         77   </span></span><br><span class="line"><span class="string">   N         78   </span></span><br><span class="line"><span class="string">   O         79   </span></span><br><span class="line"><span class="string">   P         80   </span></span><br><span class="line"><span class="string">   Q         81   </span></span><br><span class="line"><span class="string">   R         82   </span></span><br><span class="line"><span class="string">   S         83   </span></span><br><span class="line"><span class="string">   T         84   </span></span><br><span class="line"><span class="string">   U         85   </span></span><br><span class="line"><span class="string">   V         86   </span></span><br><span class="line"><span class="string">   W         87   </span></span><br><span class="line"><span class="string">   X         88   </span></span><br><span class="line"><span class="string">   Y         89   </span></span><br></pre></td></tr></table></figure>
<h2 id="phred-编码">Phred 编码</h2>
<ul>
<li>Phred+33<br>
phred+33编码，就是使用phred 值 + 33,求和之后对应的ascii字符就是该碱基的字符编码。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Phred    Sum        Ascii </span><br><span class="line">$  30      63(30+33)    ?</span><br></pre></td></tr></table></figure></li>
<li>Phred+64 phred+64定义类似，就是使用phred 值 + 64,求和之后对应的ascii字符就是该碱基的字符编码。 比较老的测序数据采用该编码方式。 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ Phred    Sum        Ascii</span><br><span class="line">$  30      94(30+64)    ^</span><br></pre></td></tr></table></figure> Phred、Error、Phred+33和Phred+64</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;&#123;0:^5&#125;  &#123;1:^8&#125;  &#123;2:^8&#125;  &#123;3:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Phred&quot;</span>,  <span class="string">&quot;Prob of&quot;</span>, <span class="string">&quot;Phred+33&quot;</span>, <span class="string">&quot;Phred+64&quot;</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;&#123;0:^5&#125;  &#123;1:^8&#125;  &#123;2:^8&#125;  &#123;3:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;score&quot;</span>,  <span class="string">&quot;Error&quot;</span>, <span class="string">&quot;Ascii&quot;</span>, <span class="string">&quot;Ascii&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> phred <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">42</span>):</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;&#123;0:^5&#125;  &#123;1:03.5f&#125;  &#123;2:^8&#125;  &#123;3:^8&#125;&quot;</span>.<span class="built_in">format</span>(phred, error_prob(phred), <span class="built_in">chr</span>(phred+<span class="number">33</span>), <span class="built_in">chr</span>(phred+<span class="number">64</span>)))</span><br><span class="line"></span><br><span class="line">Phred  Prob of   Phred+<span class="number">33</span>  Phred+<span class="number">64</span></span><br><span class="line">score   Error     Ascii     Ascii</span><br><span class="line">  <span class="number">0</span>    <span class="number">1.00000</span>     !         @</span><br><span class="line">  <span class="number">1</span>    <span class="number">0.79433</span>     <span class="string">&quot;         A</span></span><br><span class="line"><span class="string">  2    0.63096     #         B</span></span><br><span class="line"><span class="string">  3    0.50119     $         C</span></span><br><span class="line"><span class="string">  4    0.39811     %         D</span></span><br><span class="line"><span class="string">  5    0.31623     &amp;         E</span></span><br><span class="line"><span class="string">  6    0.25119     &#x27;         F</span></span><br><span class="line"><span class="string">  7    0.19953     (         G</span></span><br><span class="line"><span class="string">  8    0.15849     )         H</span></span><br><span class="line"><span class="string">  9    0.12589     *         I</span></span><br><span class="line"><span class="string"> 10    0.10000     +         J</span></span><br><span class="line"><span class="string"> 11    0.07943     ,         K</span></span><br><span class="line"><span class="string"> 12    0.06310     -         L</span></span><br><span class="line"><span class="string"> 13    0.05012     .         M</span></span><br><span class="line"><span class="string"> 14    0.03981     /         N</span></span><br><span class="line"><span class="string"> 15    0.03162     0         O</span></span><br><span class="line"><span class="string"> 16    0.02512     1         P</span></span><br><span class="line"><span class="string"> 17    0.01995     2         Q</span></span><br><span class="line"><span class="string"> 18    0.01585     3         R</span></span><br><span class="line"><span class="string"> 19    0.01259     4         S</span></span><br><span class="line"><span class="string"> 20    0.01000     5         T</span></span><br><span class="line"><span class="string"> 21    0.00794     6         U</span></span><br><span class="line"><span class="string"> 22    0.00631     7         V</span></span><br><span class="line"><span class="string"> 23    0.00501     8         W</span></span><br><span class="line"><span class="string"> 24    0.00398     9         X</span></span><br><span class="line"><span class="string"> 25    0.00316     :         Y</span></span><br><span class="line"><span class="string"> 26    0.00251     ;         Z</span></span><br><span class="line"><span class="string"> 27    0.00200     &lt;         [</span></span><br><span class="line"><span class="string"> 28    0.00158     =         \</span></span><br><span class="line"><span class="string"> 29    0.00126     &gt;         ]</span></span><br><span class="line"><span class="string"> 30    0.00100     ?         ^</span></span><br><span class="line"><span class="string"> 31    0.00079     @         _</span></span><br><span class="line"><span class="string"> 32    0.00063     A         `</span></span><br><span class="line"><span class="string"> 33    0.00050     B         a</span></span><br><span class="line"><span class="string"> 34    0.00040     C         b</span></span><br><span class="line"><span class="string"> 35    0.00032     D         c</span></span><br><span class="line"><span class="string"> 36    0.00025     E         d</span></span><br><span class="line"><span class="string"> 37    0.00020     F         e</span></span><br><span class="line"><span class="string"> 38    0.00016     G         f</span></span><br><span class="line"><span class="string"> 39    0.00013     H         g</span></span><br><span class="line"><span class="string"> 40    0.00010     I         h</span></span><br><span class="line"><span class="string"> 41    0.00008     J         i</span></span><br></pre></td></tr></table></figure>
<h2 id="为什么是33">为什么是+33</h2>
<p>因为在计算机中，0-32整型对应的字符有很多是空白和非打印的字符，肉眼不可见，所以才在33位开始编码。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;&#123;0:^8&#125;  &#123;1:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;Character&quot;</span>, <span class="string">&quot;ASCII #&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">40</span>):</span><br><span class="line">    print(<span class="string">&quot;&#123;0:^8&#125;  &#123;1:^8&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">chr</span>(i),i))</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2023/12/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="排序算法">排序算法</h2>
<p>排序算法就是将一组数据中的每个元素按照特定的顺序排序。 常见的排序算法很多，死记硬背不可取，熟悉原理吾所取。</p>
<h3 id="冒泡算法-bubble-sort">1. 冒泡算法 bubble sort</h3>
<p>循环数组每次选两个数比较，将较小的放置到前面，慢慢地将小的&quot;浮出水面&quot;。 冒泡排序的时间复杂度最差为<span class="math inline">\(O(n^2)\)</span>，最好为<span class="math inline">\(O(n)\)</span>；空间复杂度为<span class="math inline">\(O(1)\)</span>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">arr: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 注意循环的起始和终止位置</span></span><br><span class="line">    <span class="comment"># 如果i=0, 会导致j+1超过数组元素长度</span></span><br><span class="line">    <span class="comment"># 保证 j 和 j+1 能正常索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(arr)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(arr)-i):</span><br><span class="line">            <span class="comment"># 比较大小</span></span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                <span class="comment"># 浮出水面操作</span></span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>
<h3 id="选择排序-selection-sort">2. 选择排序 selection sort</h3>
<p>选择排序, 最直观，直接在数组中找。 - 第一步，在数组中选择最小的元素放置到排序的起始位置， - 第二步，在剩余的元素中继续寻找最小元素，然后放置到已经排序的序列末尾 - 第三步，重复第二步</p>
<p>选择排序的时间复杂度最差<span class="math inline">\(O(n^2)\)</span>，最好为<span class="math inline">\(O(n^2)\)</span>；空间复杂度为<span class="math inline">\(O(1)\)</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">arr: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 首先循环数组，指定第一个为最小索引</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 记录最小索引</span></span><br><span class="line">        minIndex = i</span><br><span class="line">        <span class="comment"># 遍历剩下的元素</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(arr)):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &lt; arr[minIndex]:</span><br><span class="line">                minIndex = j</span><br><span class="line">        <span class="comment"># 如果i 不是最小值的索引，交换i和minIndex交换</span></span><br><span class="line">        <span class="keyword">if</span> i != minIndex:</span><br><span class="line">            arr[i], arr[minIndex] = arr[minIndex], arr[i]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="插入排序-insertion-sort">3. 插入排序 insertion sort</h3>
<p>与打扑克牌的原理类似，它的工作原理为将待排列元素划分为「已排序」和「未排序」两部分， 每次从「未排序的」元素中选择一个插入到「已排序的」元素中的正确位置。 插入排序的时间复杂度最高为<span class="math inline">\(O(n^2)\)</span>，即原始数组倒序排列。 时间复杂度最好为<span class="math inline">\(O(n)\)</span>，空间复杂度为<span class="math inline">\(O(1)\)</span>。</p>
<ul>
<li>算法稳定性 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！ 插入排序是稳定的。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">arr: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 循环数组</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        preIndex = i - <span class="number">1</span> <span class="comment"># 前一个索引</span></span><br><span class="line">        current = arr[i] <span class="comment"># 保存当前值</span></span><br><span class="line">        <span class="keyword">while</span> preIndex &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[preIndex] &gt; current:</span><br><span class="line">            arr[preIndex+<span class="number">1</span>] = arr[preIndex] <span class="comment"># 交换，将前一位的值换到后一位</span></span><br><span class="line">            preIndex -= <span class="number">1</span>                   <span class="comment"># 索引-1，继续交换；直到换到最前面，preIndex&lt;0停止操作</span></span><br><span class="line">        arr[preIndex+<span class="number">1</span>] = current           <span class="comment"># 当前值的位置</span></span><br><span class="line">        print(i, arr)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line"><span class="comment"># 当i=0时，数组保持原样</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当i=1时，current = arr[1]</span></span><br><span class="line"><span class="comment">#          preIndex = 0,  如果arr[0] &gt; current, arr[1] = arr[0], preIndex=-1;</span></span><br><span class="line"><span class="comment"># 退出循环,preIndex = -1, arr[0] = curent</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当i=2时，current = arr[2]</span></span><br><span class="line"><span class="comment">#          preIndex = 1,  如果arr[1] &gt; current, arr[2] = arr[1], preIndex=0; 值交换位置</span></span><br><span class="line"><span class="comment">#          preIndex = 0,  如果arr[0] &gt; current, arr[1] = arr[0], preIndex=-1;</span></span><br><span class="line"><span class="comment"># 退出循环,preIndex = -1, arr[0] = current</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当i=3时，current = arr[3]</span></span><br><span class="line"><span class="comment">#          preIndex = 2,  如果arr[2] &gt; current, arr[3] = arr[2], preIndex=1;</span></span><br><span class="line"><span class="comment">#          preIndex = 1,  如果arr[1] &gt; current, arr[2] = arr[1], preIndex=0;</span></span><br><span class="line"><span class="comment">#          preIndex = 0,  如果arr[1] &gt; current, arr[1] = arr[0], preIndex=-1;</span></span><br><span class="line"><span class="comment"># 退出循环,preIndex = -1, arr[0] = current     </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：current 是传递的中间值；传递是在相邻元素之间交替进行的。</span></span><br></pre></td></tr></table></figure>
<h3 id="希尔排序-shell-sort">4. 希尔排序 shell sort</h3>
<p>希尔排序 是对插入排序的一种优化，插入排序的原理可知，每次只能移动一个位置。 shell sort采用步长分割后再进行排序，本质是分组插入排序。</p>
<p>具体实现是： - 首先步长(gap)为数组长度除以2，后续步长再除以2，直到以1为步长排序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">arr: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="keyword">import</span> math </span><br><span class="line">    <span class="comment"># 指定步长的长度</span></span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (gap &lt; <span class="built_in">len</span>(arr)/<span class="number">3</span>):</span><br><span class="line">        gap = gap*<span class="number">3</span> + <span class="number">1</span></span><br><span class="line">        print(<span class="string">&#x27;gap=&#x27;</span>,gap)</span><br><span class="line">    <span class="comment"># 步长长度随着数组的长度而改变，</span></span><br><span class="line">    <span class="comment"># 但是进入排序之前会是一个定值</span></span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#使用直接的插入排序</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, <span class="built_in">len</span>(arr)):</span><br><span class="line">            temp = arr[i]</span><br><span class="line">            j = i - gap </span><br><span class="line">            <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arr[j] &gt; temp:</span><br><span class="line">                arr[j+gap] = arr[j]</span><br><span class="line">                j -= gap </span><br><span class="line">            arr[j+gap] = temp</span><br><span class="line">        <span class="comment"># 减小gap</span></span><br><span class="line">        gap = math.floor(gap/<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>字符串匹配算法</title>
    <url>/2023/12/12/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="字符串匹配算法">字符串匹配算法</h2>
<p>字符串匹配算法在生物信息学中应用广泛，在各种比对算法高频出现。<br>
文本(Text)是一个长度为n的数组T[1..n], 模式(Pattern)是一个长度为m且m&lt;=n的数组P[1..m].</p>
<h3 id="naive-string-match">1. Naive String Match</h3>
<p>朴素的字符串匹配算法，也称为暴力匹配算法。</p>
<ul>
<li>没有预处理<br>
</li>
<li>滑动窗口为1<br>
</li>
<li>时间复杂度O((n-m+1)m)<br>
</li>
<li>模式中的字符串比较顺序不限</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naive_match</span>(<span class="params">partten, text</span>):</span></span><br><span class="line">    occurrences = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text) - <span class="built_in">len</span>(partten) +<span class="number">1</span>):</span><br><span class="line">        match = <span class="literal">True</span> </span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pattern)):</span><br><span class="line">            <span class="keyword">if</span> text[i+j] != pattern[j]:</span><br><span class="line">                match = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> match:</span><br><span class="line">            occurrences.append(i)</span><br><span class="line">    <span class="keyword">return</span> occurrences</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
